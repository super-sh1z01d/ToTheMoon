"""
Mock Birdeye client for development and testing
–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
"""

import asyncio
import json
import logging
import random
from datetime import datetime, timedelta
from typing import Optional, Dict, Any
from decimal import Decimal

from app.core.data_sources.birdeye_client import (
    TokenOverview, TokenTrades, BirdeyeClient, BirdeyeManager
)

logger = logging.getLogger(__name__)


class MockBirdeyeClient(BirdeyeClient):
    """
    Mock –≤–µ—Ä—Å–∏—è Birdeye –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    def __init__(self, **kwargs):
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º super().__init__ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.api_key = "mock_key"
        self.base_url = "mock://birdeye.api"
        self.cache_ttl = 60
        self.rate_limit_delay = 0.1
        
        self.stats = {
            "requests_made": 0,
            "cache_hits": 0,
            "cache_misses": 0,
            "rate_limits": 0,
            "errors": 0,
            "last_request": None
        }
        
        logger.info("MockBirdeyeClient initialized")

    async def _get_session(self):
        """Mock session"""
        return None

    async def close(self):
        """Mock close"""
        pass

    async def _get_from_cache(self, cache_key: str) -> Optional[Dict[str, Any]]:
        """Mock cache (–≤—Å–µ–≥–¥–∞ miss)"""
        return None

    async def _set_to_cache(self, cache_key: str, data: Dict[str, Any]):
        """Mock cache set"""
        pass

    def _generate_mock_overview_data(self, token_address: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –¥–∞–Ω–Ω—ã—Ö –¥–ª—è token overview"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ-—Å–ª—É—á–∞–π–Ω—ã–µ, –Ω–æ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        random.seed(hash(token_address) % 1000000)
        
        return {
            "address": token_address,
            "name": f"Mock Token {token_address[:8]}",
            "symbol": f"MCK{token_address[2:5].upper()}",
            "decimals": 6,
            "price": round(random.uniform(0.001, 100), 6),
            "mc": round(random.uniform(10000, 10000000), 2),
            "v24hUSD": round(random.uniform(1000, 1000000), 2),
            "liquidity": round(random.uniform(5000, 500000), 2),
            "holder": random.randint(100, 10000),
            "supply": round(random.uniform(1000000, 1000000000), 2)
        }

    def _generate_mock_trades_data(self, token_address: str) -> Dict[str, Any]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –¥–∞–Ω–Ω—ã—Ö –¥–ª—è trades"""
        random.seed(hash(token_address) % 1000000)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock —Ç–æ—Ä–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã
        now = datetime.now()
        trades = []
        
        # –°–æ–∑–¥–∞–µ–º 50-200 —Ç–æ—Ä–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        num_trades = random.randint(50, 200)
        
        for i in range(num_trades):
            # –í—Ä–µ–º—è —Ç–æ—Ä–≥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
            trade_time = now - timedelta(
                seconds=random.randint(0, 3600)
            )
            
            trades.append({
                "blockUnixTime": int(trade_time.timestamp()),
                "txType": random.choice(["buy", "sell"]),
                "volumeInUSD": round(random.uniform(10, 10000), 2),
                "priceInUSD": round(random.uniform(0.001, 100), 6)
            })
        
        return {
            "data": {
                "items": trades
            }
        }

    async def get_token_overview(self, token_address: str) -> Optional[TokenOverview]:
        """Mock –ø–æ–ª—É—á–µ–Ω–∏–µ overview"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
            await asyncio.sleep(0.1)
            
            self.stats["requests_made"] += 1
            self.stats["cache_misses"] += 1
            self.stats["last_request"] = datetime.now()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
            mock_data = self._generate_mock_overview_data(token_address)
            
            logger.debug(f"Mock overview for {token_address[:8]}...")
            return TokenOverview.from_api_response(token_address, mock_data)
            
        except Exception as e:
            logger.error(f"Mock overview error: {e}")
            self.stats["errors"] += 1
            return None

    async def get_token_trades(
        self, 
        token_address: str, 
        limit: int = 1000,
        offset: int = 0
    ) -> Optional[TokenTrades]:
        """Mock –ø–æ–ª—É—á–µ–Ω–∏–µ trades"""
        try:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
            await asyncio.sleep(0.1)
            
            self.stats["requests_made"] += 1
            self.stats["cache_misses"] += 1
            self.stats["last_request"] = datetime.now()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –¥–∞–Ω–Ω—ã–µ
            mock_data = self._generate_mock_trades_data(token_address)
            
            logger.debug(f"Mock trades for {token_address[:8]}...")
            return TokenTrades.from_api_response(token_address, mock_data)
            
        except Exception as e:
            logger.error(f"Mock trades error: {e}")
            self.stats["errors"] += 1
            return None

    async def get_token_security(self, token_address: str) -> Optional[Dict[str, Any]]:
        """Mock –ø–æ–ª—É—á–µ–Ω–∏–µ security –¥–∞–Ω–Ω—ã—Ö"""
        try:
            await asyncio.sleep(0.1)
            
            self.stats["requests_made"] += 1
            
            # Mock security –¥–∞–Ω–Ω—ã–µ
            return {
                "isLocked": True,
                "isMutable": False,
                "isVerified": random.choice([True, False]),
                "hasFreeze": False,
                "hasMint": False
            }
            
        except Exception as e:
            logger.error(f"Mock security error: {e}")
            return None


class MockBirdeyeManager(BirdeyeManager):
    """
    Mock –≤–µ—Ä—Å–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    
    async def initialize(self):
        """Mock –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"""
        # –°–æ–∑–¥–∞–µ–º mock –∫–ª–∏–µ–Ω—Ç
        self.client = MockBirdeyeClient()
        logger.info("‚úÖ Mock Birdeye manager initialized")

    async def close(self):
        """Mock –∑–∞–∫—Ä—ã—Ç–∏–µ"""
        if self.client:
            await self.client.close()
        logger.info("Mock Birdeye manager closed")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ mock —Ä–µ–∂–∏–º
def use_mock_birdeye():
    """
    –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mock –≤–µ—Ä—Å–∏—é Birdeye API
    """
    global birdeye_manager
    
    from app.core.data_sources import birdeye_client
    
    # –ó–∞–º–µ–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ mock –≤–µ—Ä—Å–∏—é
    birdeye_client.birdeye_manager = MockBirdeyeManager()
    
    logger.info("üé≠ Switched to Mock Birdeye API")
    return birdeye_client.birdeye_manager
