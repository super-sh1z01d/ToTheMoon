name: Deploy ToTheMoon2 to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  APP_PATH: ${{ secrets.VPS_PROJECT_PATH }}

jobs:
  # Build and test
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    # Backend tests
    - name: Install Python dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run backend structure tests
      run: |
        python3 scripts/test_iteration_2.py
        python3 scripts/test_iteration_3.py
        
    # Frontend tests  
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run frontend structure tests
      run: |
        python3 scripts/test_iteration_4.py
        
    # Integration tests
    - name: Run integration tests
      run: |
        python3 scripts/test_iteration_5.py
        python3 scripts/test_iteration_6.py
        python3 scripts/test_iteration_7.py
        python3 scripts/test_iteration_8.py
        python3 scripts/test_iteration_9.py
        python3 scripts/test_iteration_10.py

  # Deploy to VPS
  deploy:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
        
    - name: Add VPS to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.VPS_HOST }} >> ~/.ssh/known_hosts
        
    - name: Deploy to VPS (rsync + systemd)
      run: |
        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –Ω–∞ VPS
        rsync -az --delete ./ ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }}:${{ secrets.VPS_PROJECT_PATH }}/
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–ø–ª–æ–π –Ω–∞ VPS
        ssh ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
          set -e
          cd ${{ secrets.VPS_PROJECT_PATH }}
          
          # Ensure base packages (first run)
          if ! command -v psql >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y postgresql postgresql-contrib || true
            sudo systemctl enable --now postgresql || true
          fi
          if ! command -v redis-server >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y redis-server || true
            sudo systemctl enable --now redis-server || true
          fi
          if ! command -v nginx >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y nginx || true
            sudo systemctl enable --now nginx || true
          fi

          # Upsert helper for .env
          upsert_env() {
            key="$1"; value="$2"
            if [ -z "$value" ]; then return 0; fi
            if grep -q "^${key}=" .env 2>/dev/null; then
              sudo sed -i "s|^${key}=.*|${key}=${value}|" .env
            else
              echo "${key}=${value}" | sudo tee -a .env >/dev/null
            fi
          }

          # Ensure .env exists
          [ -f .env ] || sudo cp environment.example .env

          # Populate .env from secrets when provided
          upsert_env SECRET_KEY "${{ secrets.SECRET_KEY }}"
          upsert_env BIRDEYE_API_KEY "${{ secrets.BIRDEYE_API_KEY }}"
          upsert_env CORS_ORIGINS "${{ secrets.CORS_ORIGINS }}"
          upsert_env PUMPPORTAL_WS_URL "${{ secrets.PUMPPORTAL_WS_URL }}"
          upsert_env REDIS_URL "${{ secrets.REDIS_URL }}"
          upsert_env CELERY_BROKER_URL "${{ secrets.CELERY_BROKER_URL }}"
          upsert_env CELERY_RESULT_BACKEND "${{ secrets.CELERY_RESULT_BACKEND }}"

          # DATABASE_URL preference; or build from parts
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            upsert_env DATABASE_URL "${{ secrets.DATABASE_URL }}"
          else
            DB_USER="${{ secrets.DATABASE_USER }}"
            DB_PASS="${{ secrets.DATABASE_PASSWORD }}"
            DB_NAME="${{ secrets.DATABASE_NAME }}"
            if [ -n "$DB_USER" ] && [ -n "$DB_PASS" ] && [ -n "$DB_NAME" ]; then
              upsert_env DATABASE_URL "postgresql://${DB_USER}:${DB_PASS}@localhost:5432/${DB_NAME}"
              # Ensure role and database exist
              sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='${DB_USER}'" | grep -q 1 || sudo -u postgres psql -c "CREATE ROLE ${DB_USER} LOGIN PASSWORD '${DB_PASS}';"
              sudo -u postgres psql -tc "SELECT 1 FROM pg_database WHERE datname='${DB_NAME}'" | grep -q 1 || sudo -u postgres createdb -O ${DB_USER} ${DB_NAME}
            fi
          fi

          # Python venv & deps
          if [ ! -d .venv ]; then python3 -m venv .venv; fi
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r backend/requirements.txt
          
          # Apply DB migrations (if configured)
          python3 scripts/migrate.py || true
          
          # Build frontend
          if ! command -v npm >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y nodejs npm || true
          fi
          cd frontend && npm ci && npm run build && cd ..

          # Install/refresh systemd units
          sudo install -m 0644 deploy/systemd/tothemoon2-backend.service /etc/systemd/system/tothemoon2-backend.service || true
          sudo install -m 0644 deploy/systemd/tothemoon2-celery-worker.service /etc/systemd/system/tothemoon2-celery-worker.service || true
          sudo install -m 0644 deploy/systemd/tothemoon2-celery-beat.service /etc/systemd/system/tothemoon2-celery-beat.service || true
          sudo systemctl daemon-reload || true
          
          # Restart services
          sudo systemctl restart tothemoon2-backend || true
          sudo systemctl restart tothemoon2-celery-worker || true
          sudo systemctl restart tothemoon2-celery-beat || true

          # Install/enable Nginx site
          sudo cp deploy/nginx-system.conf /etc/nginx/sites-available/tothemoon2
          sudo ln -sf /etc/nginx/sites-available/tothemoon2 /etc/nginx/sites-enabled/tothemoon2
          sudo nginx -t && sudo systemctl reload nginx

          # Issue/renew SSL certificate if email provided
          if [ -n "${{ secrets.CERTBOT_EMAIL }}" ]; then
            sudo certbot --nginx -d ${{ secrets.VPS_HOST }} -m ${{ secrets.CERTBOT_EMAIL }} --agree-tos --non-interactive --redirect || true
          fi
        EOF
        
    - name: Health Check (via Nginx)
      run: |
        # –ñ–¥—ë–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        sleep 30
        
        set -e
        echo "Trying HTTPS health check..."
        if curl -f -s https://${{ secrets.VPS_HOST }}/health; then
          echo "‚úÖ HTTPS health OK"
        else
          echo "HTTPS health failed, trying HTTP..."
          curl -f -s http://${{ secrets.VPS_HOST }}/health
          echo "‚úÖ HTTP health OK"
        fi
        
    - name: Send notification
      if: always()
      uses: appleboy/telegram-action@v0.1.1
      with:
        to: ${{ secrets.TELEGRAM_CHAT_ID }}
        token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        message: |
          üöÄ ToTheMoon2 Deployment Status: ${{ job.status }}
          
          Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          
          üåê Production URL: https://${{ secrets.VPS_HOST }}
          üìä API Docs: https://${{ secrets.VPS_HOST }}/api/docs
          ü§ñ Bot Config: https://${{ secrets.VPS_HOST }}/config/dynamic_strategy.toml

  # End-to-End testing on production
  e2e-test:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        pip install requests toml
        
    - name: Wait for deployment
      run: |
        echo "Waiting for deployment to stabilize..."
        sleep 60
        
    - name: Run E2E tests against production (via Nginx)
      run: |
        # –û–±–Ω–æ–≤–ª—è–µ–º base URL –¥–ª—è production —á–µ—Ä–µ–∑ HTTPS (fallback –Ω–∞ HTTP –≤ —Ç–µ—Å—Ç–∞—Ö –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
        sed -i 's|http://localhost|https://${{ secrets.VPS_HOST }}|g' scripts/test_e2e_all_scenarios.py
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º E2E —Ç–µ—Å—Ç—ã (–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –Ω–∞–±–æ—Ä)
        python3 scripts/test_e2e_all_scenarios.py --mode infrastructure
        
    - name: Report E2E results
      if: always()
      run: |
        echo "E2E testing completed with status: ${{ job.status }}"
