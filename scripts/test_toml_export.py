#!/usr/bin/env python3
"""
Test TOML export for arbitrage bot
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TOML —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import sys
import os
import requests
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))


class TOMLExportTester:
    """
    –¢–µ—Å—Ç–µ—Ä –¥–ª—è TOML —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    
    def __init__(self):
        self.base_url = "http://localhost"
        
    async def test_toml_generation(self) -> bool:
        """–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ TOML –±–µ–∑ –ë–î"""
        print("üîç –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò TOML")
        print("=" * 35)
        
        try:
            from app.core.toml_export.generator import TOMLConfigGenerator
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            generator = TOMLConfigGenerator()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = generator.get_stats()
            
            print("‚úÖ TOML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
            print(f"   TOML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('toml_generated', 0)}")
            print(f"   –¢–æ–∫–µ–Ω–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('tokens_exported', 0)}")
            print(f"   –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è TOML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False

    async def test_export_logic(self) -> bool:
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å –ë–î"""
        print("\nüîç –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –≠–ö–°–ü–û–†–¢–ê")
        print("=" * 35)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not os.getenv("DATABASE_URL"):
            print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î")
            return True
        
        try:
            from app.database import SessionLocal
            from app.core.toml_export.generator import toml_generator
            
            if not SessionLocal:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return False
            
            db = SessionLocal()
            
            try:
                # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                config_params = await toml_generator._load_export_config(db)
                
                print("‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
                print(f"   MIN_SCORE_FOR_CONFIG: {config_params['min_score_for_config']}")
                print(f"   CONFIG_TOP_COUNT: {config_params['config_top_count']}")
                print(f"   SCORING_MODEL: {config_params['scoring_model']}")
                
                # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø —Ç–æ–∫–µ–Ω–æ–≤
                top_tokens = await toml_generator._get_top_tokens_for_export(db, config_params)
                
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(top_tokens)} —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                
                if top_tokens:
                    for i, token_data in enumerate(top_tokens[:3]):
                        print(f"   #{i+1}: Score {token_data['score_value']:.3f}")
                
                # –¢–µ—Å—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                preview = await toml_generator.get_export_preview(db)
                
                print(f"‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:")
                print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {preview.get('export_config', {}).get('active_tokens_count', 0)}")
                print(f"   –¢–æ–∫–µ–Ω–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {preview.get('total_tokens', 0)}")
                print(f"   –ü—É–ª–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {preview.get('total_pools', 0)}")
                
                return True
                
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return False

    async def test_toml_format(self) -> bool:
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∞ TOML"""
        print("\nüîç –¢–ï–°–¢ –§–û–†–ú–ê–¢–ê TOML")
        print("=" * 30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not os.getenv("DATABASE_URL"):
            print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç TOML")
            return True
        
        try:
            from app.database import SessionLocal
            from app.core.toml_export.generator import toml_generator
            import toml
            
            if not SessionLocal:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return False
            
            db = SessionLocal()
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º TOML
                toml_content = await toml_generator.generate_dynamic_strategy_toml(db)
                
                print("‚úÖ TOML –∫–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                print(f"   –†–∞–∑–º–µ—Ä: {len(toml_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –ü–∞—Ä—Å–∏–º TOML –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∞
                parsed_config = toml.loads(toml_content)
                
                print("‚úÖ TOML —Ñ–æ—Ä–º–∞—Ç –≤–∞–ª–∏–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                required_sections = ["strategy", "tokens", "metadata"]
                for section in required_sections:
                    if section not in parsed_config:
                        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ–∫—Ü–∏—è: {section}")
                        return False
                
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ TOML –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
                strategy = parsed_config.get("strategy", {})
                tokens = parsed_config.get("tokens", [])
                
                print(f"\nüìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ TOML:")
                print(f"   –°—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy.get('name')}")
                print(f"   –ú–æ–¥–µ–ª—å: {strategy.get('model_name')}")
                print(f"   –¢–æ–∫–µ–Ω–æ–≤: {len(tokens)}")
                print(f"   –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä: {strategy.get('min_score_threshold')}")
                
                if tokens:
                    print(f"\nüìà –¢–æ–ø —Ç–æ–∫–µ–Ω—ã:")
                    for i, token in enumerate(tokens):
                        print(f"   #{i+1}: {token.get('address', 'unknown')[:8]}... (score: {token.get('score', 0):.3f})")
                
                return True
                
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ TOML: {e}")
            return False

    def test_api_endpoints(self) -> bool:
        """–¢–µ—Å—Ç API endpoints —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã"""
        print("\nüîç –¢–ï–°–¢ API ENDPOINTS")
        print("=" * 30)
        
        try:
            # –¢–µ—Å—Ç preview endpoint
            print("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /config/preview...")
            
            try:
                response = requests.get(f"{self.base_url}/config/preview", timeout=10)
                
                if response.status_code == 200:
                    print("‚úÖ Preview endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                    data = response.json()
                    print(f"   –¢–æ–∫–µ–Ω–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {data.get('total_tokens', 0)}")
                    print(f"   –ü—É–ª–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {data.get('total_pools', 0)}")
                else:
                    print(f"‚ùå Preview endpoint –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è  Preview endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω): {e}")
            
            # –¢–µ—Å—Ç validate endpoint
            print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /config/validate...")
            
            try:
                response = requests.get(f"{self.base_url}/config/validate", timeout=10)
                
                if response.status_code == 200:
                    print("‚úÖ Validate endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                    data = response.json()
                    valid = data.get('valid', False)
                    issues = data.get('issues', [])
                    
                    print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞: {'‚úÖ' if valid else '‚ùå'}")
                    if issues:
                        print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {len(issues)}")
                        for issue in issues[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                            print(f"     - {issue}")
                else:
                    print(f"‚ùå Validate endpoint –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è  Validate endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω): {e}")
            
            # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ TOML endpoint
            print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /config/dynamic_strategy.toml...")
            
            try:
                response = requests.get(f"{self.base_url}/config/dynamic_strategy.toml", timeout=10)
                
                if response.status_code == 200:
                    print("‚úÖ TOML endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                    toml_content = response.text
                    print(f"   –†–∞–∑–º–µ—Ä TOML: {len(toml_content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π TOML
                    import toml
                    try:
                        parsed = toml.loads(toml_content)
                        print(f"   –¢–æ–∫–µ–Ω–æ–≤ –≤ TOML: {len(parsed.get('tokens', []))}")
                    except Exception as e:
                        print(f"‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π TOML —Ñ–æ—Ä–º–∞—Ç: {e}")
                        return False
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
                    cache_control = response.headers.get('Cache-Control', '')
                    if 'max-age' in cache_control:
                        print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
                    else:
                        print("‚ö†Ô∏è  –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
                else:
                    print(f"‚ùå TOML endpoint –æ—à–∏–±–∫–∞: {response.status_code}")
                    
            except requests.exceptions.RequestException as e:
                print(f"‚ö†Ô∏è  TOML endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω): {e}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints: {e}")
            return False


async def quick_toml_test():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç TOML –±–µ–∑ –ë–î
    """
    print("üîç –ë–´–°–¢–†–´–ô –¢–ï–°–¢ TOML")
    print("=" * 30)
    
    try:
        import toml
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ TOML
        test_config = {
            "strategy": {
                "name": "test_strategy",
                "version": "1.0.0"
            },
            "tokens": [
                {
                    "address": "TestToken1111111111111111111111111111",
                    "score": 0.85,
                    "pools": {
                        "raydium": ["Pool1111111111111111111111111111111111"]
                    }
                }
            ]
        }
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ TOML
        toml_content = toml.dumps(test_config)
        
        print("‚úÖ TOML —Ñ–æ—Ä–º–∞—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"   –†–∞–∑–º–µ—Ä: {len(toml_content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü–∞—Ä—Å–∏–º –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        parsed_back = toml.loads(toml_content)
        
        if parsed_back == test_config:
            print("‚úÖ TOML –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ùå TOML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ TOML: {e}")
        return False


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="Test TOML Export for Arbitrage Bot")
    parser.add_argument(
        "--mode", 
        choices=["quick", "generator", "logic", "format", "api", "all"], 
        default="quick",
        help="Test mode"
    )
    
    args = parser.parse_args()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TOML –≠–ö–°–ü–û–†–¢–ê")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if args.mode == "quick":
        success = asyncio.run(quick_toml_test())
    elif args.mode == "generator":
        tester = TOMLExportTester()
        success = asyncio.run(tester.test_toml_generation())
    elif args.mode == "logic":
        tester = TOMLExportTester()
        success = asyncio.run(tester.test_export_logic())
    elif args.mode == "format":
        tester = TOMLExportTester()
        success = asyncio.run(tester.test_toml_format())
    elif args.mode == "api":
        tester = TOMLExportTester()
        success = tester.test_api_endpoints()
    elif args.mode == "all":
        tester = TOMLExportTester()
        
        tests = [
            ("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç TOML", quick_toml_test()),
            ("TOML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä", tester.test_toml_generation()),
            ("–õ–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", tester.test_export_logic()),
            ("–§–æ—Ä–º–∞—Ç TOML", tester.test_toml_format()),
            ("API endpoints", asyncio.create_task(asyncio.coroutine(tester.test_api_endpoints)()))
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_task in tests:
            print(f"\nüîÑ {test_name}...")
            try:
                if test_name == "API endpoints":
                    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
                    result = tester.test_api_endpoints()
                else:
                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
                    result = await test_task
                
                if result:
                    passed += 1
                    print("‚úÖ –ü—Ä–æ–π–¥–µ–Ω")
                else:
                    failed += 1
                    print("‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω")
            except Exception as e:
                failed += 1
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print(f"\nüìä –ò–¢–û–ì–ò: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        success = failed == 0
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TOML Export –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        if args.mode == "quick":
            print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print("   python3 scripts/test_toml_export.py --mode all")
            print("\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º:")
            print("   uvicorn app.main:app --host 0.0.0.0 --port 8000 (–∏–∑ –ø–∞–ø–∫–∏ backend)")
            print("   curl http://localhost:8000/config/dynamic_strategy.toml")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TOML Export –Ω–µ —É–¥–∞–ª–æ—Å—å")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
