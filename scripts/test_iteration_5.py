#!/usr/bin/env python3
"""
Test script for Iteration 5: WebSocket Integration
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—è—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def test_websocket_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã WebSocket –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã WebSocket –º–æ–¥—É–ª–µ–π...")
    
    required_files = [
        "backend/app/core/__init__.py",
        "backend/app/core/data_sources/__init__.py",
        "backend/app/core/data_sources/pumpportal_websocket.py",
        "backend/app/workers/__init__.py",
        "backend/app/workers/websocket_tasks.py",
        "backend/app/core/celery_app.py",
        "backend/app/api/websocket.py",
        "scripts/test_websocket.py",
        "scripts/start_celery.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ WebSocket –º–æ–¥—É–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def test_websocket_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ WebSocket –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ WebSocket –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        from app.core.data_sources.pumpportal_websocket import (
            PumpPortalWebSocketClient,
            PumpPortalManager,
            TokenMigrationEvent,
            NewTokenEvent,
            pumpportal_manager
        )
        
        print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ WebSocket –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Celery –º–æ–¥—É–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        try:
            from app.workers.websocket_tasks import (
                start_pumpportal_websocket_task,
                stop_pumpportal_websocket_task,
                get_pumpportal_stats
            )
            from app.core.celery_app import celery_app
            from app.api.websocket import router as websocket_router
            
            print("‚úÖ Celery –º–æ–¥—É–ª–∏ —Ç–∞–∫–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
            
        except ImportError as e:
            print(f"‚ö†Ô∏è  Celery –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
            print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö WebSocket –º–æ–¥—É–ª–µ–π: {e}")
        return False

def test_websocket_client_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞...")
    
    try:
        from app.core.data_sources.pumpportal_websocket import PumpPortalWebSocketClient
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        client = PumpPortalWebSocketClient(
            websocket_url="wss://test.example.com",
            max_reconnect_attempts=3,
            reconnect_delay=1
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        if not hasattr(client, 'websocket_url'):
            print("‚ùå WebSocket –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç websocket_url")
            return False
            
        if not hasattr(client, 'connect'):
            print("‚ùå WebSocket –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ connect")
            return False
            
        if not hasattr(client, 'subscribe_migrations'):
            print("‚ùå WebSocket –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ subscribe_migrations")
            return False
            
        if client.websocket_url != "wss://test.example.com":
            print("‚ùå WebSocket URL –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
            
        print("‚úÖ WebSocket –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False

def test_celery_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Celery"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Celery...")
    
    try:
        from app.core.celery_app import celery_app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not celery_app.conf.broker_url:
            print("‚ùå Celery broker URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        if not celery_app.conf.result_backend:
            print("‚ùå Celery result backend –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞—à–∏ –º–æ–¥—É–ª–∏
        if "app.workers.websocket_tasks" not in celery_app.conf.include:
            print("‚ùå WebSocket tasks –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ Celery")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º beat schedule
        if not celery_app.conf.beat_schedule:
            print("‚ùå Beat schedule –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except ImportError as e:
        print(f"‚ö†Ô∏è  Celery –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ (—Ç—Ä–µ–±—É–µ—Ç—Å—è docker): {e}")
        print("   –ü—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ö–æ—Ç—è –±—ã –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        if os.path.exists("backend/app/core/celery_app.py"):
            print("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Celery —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return True
        else:
            print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Celery –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Celery: {e}")
        return False

def test_api_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebSocket API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebSocket API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
        if not os.path.exists("backend/app/api/websocket.py"):
            print("‚ùå WebSocket API —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
            
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å API –º–æ–¥—É–ª–∏
        try:
            from app.api.websocket import router
            from app.api import websocket_router
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ—É—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω
            if not router:
                print("‚ùå WebSocket —Ä–æ—É—Ç–µ—Ä –Ω–µ —Å–æ–∑–¥–∞–Ω")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç –≤ main API
            if not websocket_router:
                print("‚ùå WebSocket —Ä–æ—É—Ç–µ—Ä –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ main API")
                return False
            
            print("‚úÖ WebSocket API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return True
            
        except ImportError as e:
            print(f"‚ö†Ô∏è  WebSocket API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Ç—Ä–µ–±—É–µ—Ç—Å—è docker): {e}")
            print("   –ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ main.py...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ main.py
            with open("backend/app/main.py", "r") as f:
                main_content = f.read()
            
            if "websocket_router" in main_content:
                print("‚úÖ WebSocket —Ä–æ—É—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
                return True
            else:
                print("‚ùå WebSocket —Ä–æ—É—Ç–µ—Ä –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
                return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ WebSocket API: {e}")
        return False

def test_runtime_environment():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ Docker)"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–º–µ—Ä–µ
        with open("environment.example", "r") as f:
            env_content = f.read()
        
        required = ["PUMPPORTAL_WS_URL", "CELERY_BROKER_URL", "CELERY_RESULT_BACKEND", "REDIS_URL"]
        missing = [k for k in required if k not in env_content]
        if missing:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ –≤ environment.example: {missing}")
            return False
        
        print("‚úÖ Environment –ø—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return False

def test_event_data_classes():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
    
    try:
        from app.core.data_sources.pumpportal_websocket import (
            TokenMigrationEvent,
            NewTokenEvent
        )
        from datetime import datetime
        
        # –¢–µ—Å—Ç TokenMigrationEvent
        migration_event = TokenMigrationEvent(
            token_address="So11111111111111111111111111111111111111112",
            timestamp=datetime.now(),
            liquidity_pool_address="Pool11111111111111111111111111111111111111",
            dex_name="raydium"
        )
        
        if migration_event.token_address != "So11111111111111111111111111111111111111112":
            print("‚ùå TokenMigrationEvent –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
        
        # –¢–µ—Å—Ç NewTokenEvent
        new_token_event = NewTokenEvent(
            token_address="Token1111111111111111111111111111111111111",
            name="Test Token",
            symbol="TEST",
            timestamp=datetime.now()
        )
        
        if new_token_event.symbol != "TEST":
            print("‚ùå NewTokenEvent –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return False
        
        print("‚úÖ –ö–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ò–¢–ï–†–ê–¶–ò–ò 5")
    print("=" * 50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ WebSocket –º–æ–¥—É–ª–µ–π", test_websocket_structure),
        ("–ò–º–ø–æ—Ä—Ç WebSocket –º–æ–¥—É–ª–µ–π", test_websocket_imports),
        ("–°–æ–∑–¥–∞–Ω–∏–µ WebSocket –∫–ª–∏–µ–Ω—Ç–∞", test_websocket_client_creation),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery", test_celery_configuration),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è WebSocket API", test_api_integration),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_runtime_environment),
        ("–ö–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π", test_event_data_classes),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    if failed == 0:
        print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø 5 –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("1. uvicorn app.main:app --host 0.0.0.0 --port 8000 (–∏–∑ –ø–∞–ø–∫–∏ backend)")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:")
        print("   python3 scripts/test_websocket.py --mode simple")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Celery worker:")
        print("   python3 scripts/start_celery.py worker")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints:")
        print("   - GET /api/websocket/pumpportal/status")
        print("   - POST /api/websocket/pumpportal/start")
        print("   - GET /api/websocket/stats")
        print("5. –î–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:")
        print("   python3 scripts/test_websocket.py --mode listen --duration 300")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
