#!/usr/bin/env python3
"""
Test API requests for ToTheMoon2
–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import json
import time
import requests
from typing import Dict, Any

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000/api"
HEALTH_URL = "http://localhost:8000/health"

def test_health():
    """–¢–µ—Å—Ç health check"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /health...")
    try:
        response = requests.get(HEALTH_URL, timeout=5)
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_info():
    """–¢–µ—Å—Ç info endpoint"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/info...")
    try:
        response = requests.get(f"{BASE_URL}/info", timeout=5)
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_system_stats():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/system/stats...")
    try:
        response = requests.get(f"{BASE_URL}/system/stats", timeout=5)
        print(f"Status: {response.status_code}")
        print(f"Response: {json.dumps(response.json(), indent=2)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_system_config():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/system/config...")
    try:
        response = requests.get(f"{BASE_URL}/system/config", timeout=5)
        print(f"Status: {response.status_code}")
        response_data = response.json()
        print(f"Config categories: {list(response_data.get('config', {}).keys())}")
        print(f"Total params: {response_data.get('total_params', 0)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_get_tokens():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/tokens...")
    try:
        response = requests.get(f"{BASE_URL}/tokens", timeout=5)
        print(f"Status: {response.status_code}")
        response_data = response.json()
        print(f"Total tokens: {response_data.get('total', 0)}")
        print(f"Tokens in response: {len(response_data.get('tokens', []))}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_create_token():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ POST /api/tokens...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        test_token = {
            "token_address": "So11111111111111111111111111111111111111112"
        }
        
        response = requests.post(
            f"{BASE_URL}/tokens",
            json=test_token,
            headers={"Content-Type": "application/json"},
            timeout=5
        )
        
        print(f"Status: {response.status_code}")
        
        if response.status_code == 201:
            token_data = response.json()
            print(f"Created token: {token_data.get('token_address')}")
            print(f"Token ID: {token_data.get('id')}")
            print(f"Status: {token_data.get('status')}")
            return True
        elif response.status_code == 400:
            print(f"Token already exists (expected): {response.json()}")
            return True  # –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        else:
            print(f"Error response: {response.json()}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_get_pools():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—É–ª–æ–≤"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GET /api/pools...")
    try:
        response = requests.get(f"{BASE_URL}/pools", timeout=5)
        print(f"Status: {response.status_code}")
        pools = response.json()
        print(f"Total pools: {len(pools)}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_api_docs():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ /api/docs...")
    try:
        response = requests.get("http://localhost:8000/api/docs", timeout=5)
        print(f"Status: {response.status_code}")
        return response.status_code == 200
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ENDPOINTS")
    print("=" * 50)
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω (uvicorn) –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ http://localhost:8000")
    print("=" * 50)
    
    tests = [
        ("Health Check", test_health),
        ("App Info", test_info),
        ("System Stats", test_system_stats),
        ("System Config", test_system_config),
        ("Get Tokens", test_get_tokens),
        ("Create Token", test_create_token),
        ("Get Pools", test_get_pools),
        ("API Docs", test_api_docs),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print("‚úÖ –ü—Ä–æ—à–µ–ª")
            else:
                failed += 1
                print("‚ùå –ù–µ –ø—Ä–æ—à–µ–ª")
        except Exception as e:
            failed += 1
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    if failed == 0:
        print("üéâ –í–°–ï API ENDPOINTS –†–ê–ë–û–¢–ê–Æ–¢!")
        print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://localhost/api/docs")
        print("üîß –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: http://localhost/api/redoc")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API endpoints")
        print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend (uvicorn) –∏ Celery")

if __name__ == "__main__":
    main()
