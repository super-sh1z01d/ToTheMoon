#!/usr/bin/env python3
"""
Test script for Iteration 7: Scoring Engine
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ–¥—å–º–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def test_scoring_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã scoring –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã scoring –º–æ–¥—É–ª–µ–π...")
    
    required_files = [
        "backend/app/core/scoring/__init__.py",
        "backend/app/core/scoring/base.py",
        "backend/app/core/scoring/hybrid_momentum_v1.py",
        "backend/app/core/scoring/manager.py",
        "backend/app/workers/scoring_tasks.py",
        "backend/app/api/scoring.py",
        "scripts/test_scoring.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ scoring –º–æ–¥—É–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def test_scoring_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ scoring –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ scoring –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –∫–ª–∞—Å—Å–æ–≤
        from app.core.scoring.base import (
            ScoringModelBase,
            ScoringResult,
            ScoringConfig,
            TokenMetricsInput,
            ScoringComponents,
            EWMAHelper
        )
        
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        
        # –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ Hybrid Momentum
        from app.core.scoring.hybrid_momentum_v1 import (
            HybridMomentumV1,
            HybridMomentumV1Factory
        )
        
        print("‚úÖ Hybrid Momentum –º–æ–¥–µ–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # –¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        from app.core.scoring.manager import ScoringManager, scoring_manager
        
        print("‚úÖ Scoring manager –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        
        # –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        from app.core.scoring import AVAILABLE_MODELS
        
        if "hybrid_momentum_v1" not in AVAILABLE_MODELS:
            print("‚ùå hybrid_momentum_v1 –Ω–µ –≤ AVAILABLE_MODELS")
            return False
        
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(AVAILABLE_MODELS)}")
        
        # –¢–µ—Å—Ç Celery tasks
        try:
            from app.workers.scoring_tasks import (
                calculate_token_score_task,
                calculate_scores_for_active_tokens_task,
                reload_scoring_model_task
            )
            print("‚úÖ Scoring Celery tasks –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        except ImportError as e:
            print(f"‚ö†Ô∏è  Scoring Celery tasks –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        
        # –¢–µ—Å—Ç API —Ä–æ—É—Ç–µ—Ä–∞
        try:
            from app.api.scoring import router as scoring_router
            from app.api import scoring_router as main_scoring_router
            
            if scoring_router and main_scoring_router:
                print("‚úÖ Scoring API —Ä–æ—É—Ç–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        except ImportError as e:
            print(f"‚ö†Ô∏è  Scoring API —Ä–æ—É—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ main.py
            with open("backend/app/main.py", "r") as f:
                main_content = f.read()
            
            if "scoring_router" in main_content:
                print("‚úÖ Scoring —Ä–æ—É—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
            else:
                print("‚ùå Scoring —Ä–æ—É—Ç–µ—Ä –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
                return False
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ scoring –º–æ–¥—É–ª–µ–π: {e}")
        return False

def test_formula_implementation():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—É–ª"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ñ–æ—Ä–º—É–ª...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ hybrid_momentum_v1.py
        with open("backend/app/core/scoring/hybrid_momentum_v1.py", "r") as f:
            hybrid_content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–æ—Ä–º—É–ª
        required_formulas = [
            "tx_count_5m / 5",  # TX Accel
            "tx_count_1h / 60",
            "volume_1h / 12",   # Vol Momentum  
            "holders_1h_ago",   # Holder Growth
            "buys_volume_5m",   # Orderflow Imbalance
            "sells_volume_5m"
        ]
        
        for formula in required_formulas:
            if formula not in hybrid_content:
                print(f"‚ùå –§–æ—Ä–º—É–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {formula}")
                return False
        
        print("‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã
        with open("backend/app/core/scoring/base.py", "r") as f:
            base_content = f.read()
        
        required_methods = [
            "_calculate_tx_accel",
            "_calculate_vol_momentum", 
            "_calculate_holder_growth",
            "_calculate_orderflow_imbalance",
            "_apply_ewma_smoothing"
        ]
        
        for method in required_methods:
            if f"def {method}" not in base_content:
                print(f"‚ùå –ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {method}")
                return False
        
        print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º—É–ª: {e}")
        return False

def test_configuration_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ Celery
        with open("backend/app/core/celery_app.py", "r") as f:
            celery_content = f.read()
        
        if "app.workers.scoring_tasks" not in celery_content:
            print("‚ùå Scoring tasks –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ Celery")
            return False
            
        if "calculate_scores_for_active_tokens" not in celery_content:
            print("‚ùå Scoring –∑–∞–¥–∞—á–∏ –Ω–µ –≤ beat schedule")
            return False
        
        print("‚úÖ Celery –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º factory –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –ë–î
        with open("backend/app/core/scoring/hybrid_momentum_v1.py", "r") as f:
            factory_content = f.read()
        
        if "create_from_system_config" not in factory_content:
            print("‚ùå Factory –º–µ—Ç–æ–¥ –¥–ª—è system config –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        if "SCORING_WEIGHTS" not in factory_content:
            print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ—Å–æ–≤ –∏–∑ –ë–î –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            return False
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ë–î —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç API endpoints"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ API —Ñ–∞–π–ª–∞
        with open("backend/app/api/scoring.py", "r") as f:
            api_content = f.read()
        
        required_endpoints = [
            "@router.get(\"/status\")",
            "@router.post(\"/calculate/{token_address}\")",
            "@router.post(\"/calculate-all\")",
            "@router.get(\"/top-tokens\")",
            "@router.get(\"/models\")",
            "@router.put(\"/config/{key}\")"
        ]
        
        for endpoint in required_endpoints:
            if endpoint not in api_content:
                print(f"‚ùå Endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: {endpoint}")
                return False
        
        print("‚úÖ API endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if "Weights sum must be 1.0" not in api_content:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–µ—Å–æ–≤ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
            return False
            
        if "EWMA_ALPHA must be between 0.0 and 1.0" not in api_content:
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è EWMA –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞") 
            return False
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
        return False

def test_ewma_implementation():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ EWMA"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ EWMA...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ EWMA –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –∫–æ –≤—Å–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        with open("backend/app/core/scoring/base.py", "r") as f:
            base_content = f.read()
        
        ewma_components = [
            "tx_accel_smoothed",
            "vol_momentum_smoothed",
            "holder_growth_smoothed", 
            "orderflow_imbalance_smoothed"
        ]
        
        for component in ewma_components:
            if component not in base_content:
                print(f"‚ùå EWMA –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {component}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä —Ç–æ–∂–µ —Å–≥–ª–∞–∂–∏–≤–∞–µ—Ç—Å—è
        with open("backend/app/core/scoring/hybrid_momentum_v1.py", "r") as f:
            hybrid_content = f.read()
        
        if "EWMAHelper.smooth(raw_score" not in hybrid_content:
            print("‚ùå EWMA —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∫–æ—Ä–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ")
            return False
        
        print("‚úÖ EWMA —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ EWMA: {e}")
        return False

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ò–¢–ï–†–ê–¶–ò–ò 7")
    print("=" * 50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ scoring –º–æ–¥—É–ª–µ–π", test_scoring_structure),
        ("–ò–º–ø–æ—Ä—Ç scoring –º–æ–¥—É–ª–µ–π", test_scoring_imports),
        ("–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª", test_formula_implementation),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_configuration_integration),
        ("API endpoints", test_api_endpoints),
        ("EWMA —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è", test_ewma_implementation),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    if failed == 0:
        print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø 7 –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("1. uvicorn app.main:app --host 0.0.0.0 --port 8000 (–∏–∑ –ø–∞–ø–∫–∏ backend)")
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º—É–ª:")
        print("   python3 scripts/test_scoring.py --mode quick")
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:")
        print("   python3 scripts/test_scoring.py --mode model")
        print("4. –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
        print("   python3 scripts/test_scoring.py --mode all")
        print("5. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints:")
        print("   - GET /api/scoring/status")
        print("   - GET /api/scoring/models")
        print("   - POST /api/scoring/test")
        print("   - GET /api/scoring/config")
        print("6. –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∞:")
        print("   curl -X POST http://localhost:8000/api/scoring/calculate/So11111111111111111111111111111111111111112")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
