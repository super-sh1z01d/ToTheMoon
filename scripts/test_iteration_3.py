#!/usr/bin/env python3
"""
Test script for Iteration 3: FastAPI basic server
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ—Ç—å–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
import json
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def test_api_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç —Ä–æ—É—Ç–µ—Ä–æ–≤
        from app.api import tokens_router, pools_router, system_router, health_router
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—ã
        from app.schemas import TokenCreate, TokenResponse, PoolCreate, SystemStatsResponse
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CRUD
        from app.crud import token_crud, pool_crud, system_crud
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ API –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
        return False

def test_fastapi_app():
    """–¢–µ—Å—Ç FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        from app.main import app
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
        if app is None:
            print("‚ùå FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ—É—Ç–µ—Ä—ã
        routes = [route.path for route in app.routes]
        expected_routes = [
            "/health", "/info", "/api/tokens", "/api/pools", 
            "/api/system/config", "/api/system/stats"
        ]
        
        missing_routes = []
        for expected_route in expected_routes:
            if not any(expected_route in route for route in routes):
                missing_routes.append(expected_route)
        
        if missing_routes:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–æ—É—Ç–µ—Ä—ã: {missing_routes}")
            return False
        
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FastAPI: {e}")
        return False

def test_database_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î...")
    
    try:
        from app.database import get_db, SessionLocal
        
        if not SessionLocal:
            print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞ (–Ω–µ—Ç DATABASE_URL)")
            return True  # –≠—Ç–æ OK –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –ë–î
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º dependency
        db_gen = get_db()
        db = next(db_gen)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        from sqlalchemy import text
        result = db.execute(text("SELECT 1 as test"))
        row = result.fetchone()
        
        db.close()
        
        if row[0] == 1:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ë–î")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î: {e}")
        return False

def test_schemas_validation():
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Pydantic —Å—Ö–µ–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ö–µ–º...")
    
    try:
        from app.schemas.token import TokenCreate, TokenResponse
        from app.schemas.pool import PoolCreate
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ - –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        valid_token = TokenCreate(token_address="So11111111111111111111111111111111111111112")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            invalid_token = TokenCreate(token_address="short")
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∞–¥—Ä–µ—Å")
            return False
        except ValueError:
            pass  # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ - –≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        valid_pool = PoolCreate(
            pool_address="So11111111111111111111111111111111111111112",
            dex_name="raydium",
            token_id="123e4567-e89b-12d3-a456-426614174000"
        )
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—É–ª–∞ - –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π DEX
        try:
            invalid_pool = PoolCreate(
                pool_address="So11111111111111111111111111111111111111112",
                dex_name="invalid_dex",
                token_id="123e4567-e89b-12d3-a456-426614174000"
            )
            print("‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É–ª–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π DEX")
            return False
        except ValueError:
            pass  # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞
        
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ö–µ–º: {e}")
        return False

def test_crud_operations():
    """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    try:
        from app.crud import token_crud, pool_crud
        from app.models.token import Token, TokenStatus
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CRUD –∫–ª–∞—Å—Å—ã —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if not hasattr(token_crud, 'model'):
            print("‚ùå token_crud –Ω–µ –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç–∞ model")
            return False
        
        if token_crud.model != Token:
            print("‚ùå token_crud.model –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–æ–¥–µ–ª–∏ Token")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        required_methods = ['get', 'get_multi', 'create', 'update', 'remove']
        for method in required_methods:
            if not hasattr(token_crud, method):
                print(f"‚ùå token_crud –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ {method}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Ç–æ–∫–µ–Ω–æ–≤
        token_specific_methods = ['get_by_address', 'get_by_status', 'create_with_history']
        for method in token_specific_methods:
            if not hasattr(token_crud, method):
                print(f"‚ùå token_crud –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ {method}")
                return False
        
        print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRUD: {e}")
        return False

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ò–¢–ï–†–ê–¶–ò–ò 3")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º environment
    if not os.getenv("DATABASE_URL"):
        print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç–µ—Å—Ç—ã –ë–î –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ uvicorn + –º–∏–≥—Ä–∞—Ü–∏–∏")
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ API", test_api_structure),
        ("FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", test_fastapi_app),
        ("–í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º", test_schemas_validation),
        ("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏", test_crud_operations),
    ]
    
    # –¢–µ—Å—Ç –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if os.getenv("DATABASE_URL"):
        tests.append(("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î", test_database_integration))
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    if failed == 0:
        print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø 3 –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("1. python3 scripts/migrate.py")
        print("2. uvicorn app.main:app --host 0.0.0.0 --port 8000 (–∏–∑ –ø–∞–ø–∫–∏ backend)")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API:")
        print("   - GET /health")
        print("   - GET /api/docs") 
        print("   - GET /api/tokens")
        print("   - POST /api/tokens")
        print("   - GET /api/system/stats")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
