#!/usr/bin/env python3
"""
Test script for Iteration 4: React Frontend (MVP)
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""

import os
import json
from pathlib import Path

def test_project_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã React –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        "frontend/package.json",
        "frontend/tsconfig.json", 
        "frontend/vite.config.ts",
        "frontend/tailwind.config.js",
        "frontend/postcss.config.js",
        "frontend/index.html",
        "frontend/src/main.tsx",
        "frontend/src/App.tsx",
        "frontend/src/index.css"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def test_package_json():
    """–¢–µ—Å—Ç package.json"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ package.json...")
    
    try:
        with open("frontend/package.json", "r") as f:
            package_data = json.load(f)
        
        required_deps = [
            "react", "react-dom", "react-query", 
            "recharts", "lucide-react"
        ]
        
        required_dev_deps = [
            "@types/react", "@types/react-dom", 
            "@vitejs/plugin-react", "typescript", 
            "tailwindcss", "vite"
        ]
        
        missing_deps = []
        for dep in required_deps:
            if dep not in package_data.get("dependencies", {}):
                missing_deps.append(dep)
        
        for dep in required_dev_deps:
            if dep not in package_data.get("devDependencies", {}):
                missing_deps.append(dep)
        
        if missing_deps:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {missing_deps}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scripts
        required_scripts = ["dev", "build", "preview"]
        for script in required_scripts:
            if script not in package_data.get("scripts", {}):
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç script: {script}")
                return False
        
        print("‚úÖ package.json –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json: {e}")
        return False

def test_typescript_config():
    """–¢–µ—Å—Ç TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        with open("frontend/tsconfig.json", "r") as f:
            tsconfig_data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        compiler_options = tsconfig_data.get("compilerOptions", {})
        
        required_options = {
            "target": "ES2020",
            "module": "ESNext",
            "jsx": "react-jsx",
            "strict": True
        }
        
        for option, expected_value in required_options.items():
            if compiler_options.get(option) != expected_value:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ TypeScript: {option} = {compiler_options.get(option)}, –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_value}")
                return False
        
        print("‚úÖ TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è tsconfig.json: {e}")
        return False

def test_components():
    """–¢–µ—Å—Ç React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    required_components = [
        "frontend/src/components/Header.tsx",
        "frontend/src/components/SystemStats.tsx",
        "frontend/src/components/TokensTable.tsx",
        "frontend/src/components/TokensFilter.tsx",
        "frontend/src/components/TokenStatus.tsx",
        "frontend/src/components/AddressDisplay.tsx",
        "frontend/src/components/LoadingSkeleton.tsx"
    ]
    
    missing_components = []
    for component_path in required_components:
        if not os.path.exists(component_path):
            missing_components.append(component_path)
    
    if missing_components:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {missing_components}")
        return False
    
    print("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
    return True

def test_hooks_and_utils():
    """–¢–µ—Å—Ç —Ö—É–∫–æ–≤ –∏ —É—Ç–∏–ª–∏—Ç"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—É–∫–æ–≤ –∏ —É—Ç–∏–ª–∏—Ç...")
    
    required_files = [
        "frontend/src/hooks/useApi.ts",
        "frontend/src/utils/api.ts",
        "frontend/src/utils/format.ts",
        "frontend/src/types/api.ts"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –•—É–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
    return True

def test_tailwind_setup():
    """–¢–µ—Å—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tailwind CSS"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Tailwind CSS...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º tailwind.config.js
    if not os.path.exists("frontend/tailwind.config.js"):
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tailwind.config.js")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º postcss.config.js
    if not os.path.exists("frontend/postcss.config.js"):
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç postcss.config.js")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ index.css –µ—Å—Ç—å Tailwind –¥–∏—Ä–µ–∫—Ç–∏–≤—ã
    try:
        with open("frontend/src/index.css", "r") as f:
            css_content = f.read()
        
        required_directives = ["@tailwind base", "@tailwind components", "@tailwind utilities"]
        for directive in required_directives:
            if directive not in css_content:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Tailwind –¥–∏—Ä–µ–∫—Ç–∏–≤–∞: {directive}")
                return False
        
        print("‚úÖ Tailwind CSS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è index.css: {e}")
        return False

def test_pages():
    """–¢–µ—Å—Ç —Å—Ç—Ä–∞–Ω–∏—Ü"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü...")
    
    required_pages = [
        "frontend/src/pages/HomePage.tsx"
    ]
    
    missing_pages = []
    for page_path in required_pages:
        if not os.path.exists(page_path):
            missing_pages.append(page_path)
    
    if missing_pages:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {missing_pages}")
        return False
    
    print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
    return True

def test_dev_setup():
    """–¢–µ—Å—Ç dev-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–±–µ–∑ Docker)"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ dev-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ API base URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è dev
        with open("frontend/src/utils/api.ts", "r") as f:
            api_utils = f.read()
        
        if "VITE_API_BASE_URL" not in api_utils:
            print("‚ùå VITE_API_BASE_URL –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ utils/api.ts")
            return False
        
        print("‚úÖ Dev-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (VITE_API_BASE_URL –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ dev-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        return False

def test_import_syntax():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    
    test_files = [
        "frontend/src/App.tsx",
        "frontend/src/main.tsx",
        "frontend/src/pages/HomePage.tsx",
        "frontend/src/components/Header.tsx"
    ]
    
    for file_path in test_files:
        try:
            with open(file_path, "r") as f:
                content = f.read()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã React
            if file_path.endswith(".tsx") and "import React" not in content:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º–ø–æ—Ä—Ç React –≤ {file_path}")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã TypeScript
            if "interface " not in content and "type " not in content and "React.FC" not in content:
                continue  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ñ–∞–π–ª –±–µ–∑ —Ç–∏–ø–æ–≤
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
            return False
    
    print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–º–ø–æ—Ä—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    return True

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ò–¢–ï–†–ê–¶–ò–ò 4")
    print("=" * 50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞", test_project_structure),
        ("package.json", test_package_json),
        ("TypeScript –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_typescript_config),
        ("React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", test_components),
        ("–•—É–∫–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã", test_hooks_and_utils),
        ("Tailwind CSS", test_tailwind_setup),
        ("–°—Ç—Ä–∞–Ω–∏—Ü—ã", test_pages),
        ("Dev –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", test_dev_setup),
        ("–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–º–ø–æ—Ä—Ç–æ–≤", test_import_syntax),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    if failed == 0:
        print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø 4 –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("1. npm run dev (–≤ –ø–∞–ø–∫–µ frontend)")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:3000")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
        print("   - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        print("   - –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–∫–µ–Ω–æ–≤")
        print("   - –§–∏–ª—å—Ç—Ä—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É")
        print("   - Responsive –¥–∏–∑–∞–π–Ω")
        print("4. –î–ª—è production-—Å–±–æ—Ä–∫–∏: npm run build (—Ä–∞–∑–¥–∞–π—Ç–µ dist —á–µ—Ä–µ–∑ Nginx)")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    import sys
    success = main()
    sys.exit(0 if success else 1)
