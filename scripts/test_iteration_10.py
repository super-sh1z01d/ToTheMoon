#!/usr/bin/env python3
"""
Test script for Iteration 10: Celery Workers Optimization
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–µ—Å—è—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def test_celery_monitoring_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Celery"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Celery...")
    
    required_files = [
        "backend/app/core/celery_monitoring/__init__.py",
        "backend/app/core/celery_monitoring/monitor.py",
        "backend/app/core/celery_monitoring/health.py",
        "backend/app/workers/celery_health_tasks.py",
        "backend/app/api/celery_management.py",
        "scripts/celery_manager.py",
        "scripts/test_celery_workers.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Celery –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def test_performance_optimization():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Celery –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        with open("backend/app/core/celery_app.py", "r") as f:
            celery_content = f.read()
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è 2GB RAM
        optimizations = [
            ("worker_concurrency=1", "Concurrency —Å–Ω–∏–∂–µ–Ω –¥–æ 1"),
            ("worker_prefetch_multiplier=1", "Prefetch –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"),
            ("worker_max_memory_per_child=100000", "Memory limit –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å"),
            ("worker_max_tasks_per_child=1000", "Tasks limit –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å"),
            ("task_acks_late=True", "Late acknowledgment")
        ]
        
        optimizations_found = 0
        
        for optimization, description in optimizations:
            if optimization in celery_content:
                print(f"‚úÖ {description}")
                optimizations_found += 1
            else:
                print(f"‚ùå {description} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        total_optimizations = len(optimizations)
        print(f"\nüìä Celery –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–æ: {optimizations_found}/{total_optimizations}")
        
        return optimizations_found >= (total_optimizations * 0.8)  # 80% –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def test_monitoring_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ health tasks –≤ Celery
        with open("backend/app/core/celery_app.py", "r") as f:
            celery_content = f.read()
        
        if "app.workers.celery_health_tasks" not in celery_content:
            print("‚ùå Health tasks –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ Celery")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –≤ schedule
        monitoring_tasks = [
            "celery-system-monitoring",
            "celery-health-check"
        ]
        
        for task in monitoring_tasks:
            if task not in celery_content:
                print(f"‚ùå Monitoring task –Ω–µ –Ω–∞–π–¥–µ–Ω: {task}")
                return False
        
        print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        with open("backend/app/main.py", "r") as f:
            main_content = f.read()
        
        if "celery_router" not in main_content:
            print("‚ùå Celery —Ä–æ—É—Ç–µ—Ä –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
            return False
        
        print("‚úÖ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_worker_management():
    """–¢–µ—Å—Ç —É—Ç–∏–ª–∏—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è workers"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ç–∏–ª–∏—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ celery_manager.py
        with open("scripts/celery_manager.py", "r") as f:
            manager_content = f.read()
        
        required_functions = [
            "start_worker",
            "stop_workers", 
            "restart_workers",
            "get_status",
            "run_production_mode",
            "run_development_mode"
        ]
        
        for function in required_functions:
            if f"def {function}" not in manager_content:
                print(f"‚ùå –§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {function}")
                return False
        
        print("‚úÖ –£—Ç–∏–ª–∏—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        if "signal.SIGTERM" not in manager_content:
            print("‚ùå Graceful shutdown –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            return False
        
        print("‚úÖ Graceful shutdown —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è production
        if "concurrency=1" not in manager_content:
            print("‚ùå Production –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        print("‚úÖ Production –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è workers: {e}")
        return False

def test_health_checks():
    """–¢–µ—Å—Ç health check —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health check —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ health tasks
        with open("backend/app/workers/celery_health_tasks.py", "r") as f:
            health_content = f.read()
        
        required_checks = [
            "database",     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ë–î
            "redis",        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
            "filesystem",   # –ü—Ä–æ–≤–µ—Ä–∫–∞ –§–°
            "system_resources"  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        ]
        
        for check in required_checks:
            if f'"{check}"' in health_content:
                print(f"‚úÖ {check.capitalize()} check —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            else:
                print(f"‚ùå {check.capitalize()} check –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç
        if "stress_test_task" not in health_content:
            print("‚ùå Stress test task –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        print("‚úÖ Stress test —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–ª—è health checks
        with open("backend/app/api/celery_management.py", "r") as f:
            api_content = f.read()
        
        health_endpoints = [
            "/health-check",
            "/ping-workers",
            "/stress-test",
            "/diagnose"
        ]
        
        for endpoint in health_endpoints:
            if endpoint not in api_content:
                print(f"‚ùå Health endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω: {endpoint}")
                return False
        
        print("‚úÖ Health check API endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ health checks: {e}")
        return False

def test_requirements_update():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements...")
    
    try:
        with open("backend/requirements.txt", "r") as f:
            requirements_content = f.read()
        
        if "psutil==" not in requirements_content:
            print("‚ùå psutil –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ requirements.txt")
            return False
        
        print("‚úÖ psutil –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ toml —Ç–æ–∂–µ –µ—Å—Ç—å (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏)
        if "toml==" not in requirements_content:
            print("‚ùå toml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ requirements.txt")
            return False
        
        print("‚úÖ Requirements –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ requirements: {e}")
        return False

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ò–¢–ï–†–ê–¶–ò–ò 10")
    print("=" * 50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Celery", test_celery_monitoring_structure),
        ("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", test_performance_optimization),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", test_monitoring_integration),
        ("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workers", test_worker_management),
        ("Health check —Å–∏—Å—Ç–µ–º–∞", test_health_checks),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements", test_requirements_update),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    if failed == 0:
        print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø 10 –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("1. uvicorn app.main:app --host 0.0.0.0 --port 8000 (–∏–∑ –ø–∞–ø–∫–∏ backend)")
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery workers:")
        print("   python3 scripts/test_celery_workers.py --mode quick")
        print("   python3 scripts/test_celery_workers.py --mode all")
        print("3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workers:")
        print("   python3 scripts/celery_manager.py status")
        print("   python3 scripts/celery_manager.py production")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints:")
        print("   - GET /api/celery/status")
        print("   - GET /api/celery/workers")
        print("   - GET /api/celery/performance")
        print("   - POST /api/celery/health-check")
        print("   - POST /api/celery/stress-test")
        print("5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        print("   curl http://localhost:8000/api/celery/performance")
        print("   ps aux | grep celery")
        print("\n‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –î–õ–Ø 2GB RAM:")
        print("   ‚Ä¢ Worker concurrency: 1 (–≤–º–µ—Å—Ç–æ 2)")
        print("   ‚Ä¢ Memory limit: 100MB –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å")
        print("   ‚Ä¢ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ memory")
        print("   ‚Ä¢ Graceful shutdown —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏")
        print("   ‚Ä¢ Health checks –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç")
        print("   ‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω—ã gossip –∏ mingle")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
