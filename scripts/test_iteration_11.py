#!/usr/bin/env python3
"""
Test script for Iteration 11: Final Integration
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –æ–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç–æ–π (—Ñ–∏–Ω–∞–ª—å–Ω–æ–π) –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def test_realtime_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã real-time —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã real-time —Å–∏—Å—Ç–µ–º—ã...")
    
    required_files = [
        "backend/app/core/realtime/__init__.py",
        "backend/app/core/realtime/websocket_manager.py",
        "backend/app/core/realtime/notifications.py",
        "backend/app/api/realtime.py",
        "frontend/src/hooks/useWebSocket.ts"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ real-time —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def test_production_config():
    """–¢–µ—Å—Ç production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    required_files = [
        "DEPLOYMENT_GUIDE.md",
        "deploy/nginx-system.conf",
        ".github/workflows/deploy.yml"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ nginx-system.conf
    try:
        with open("deploy/nginx-system.conf", "r") as f:
            nginx_content = f.read()
        checks = [
            ("location /api/", "API location"),
            ("location /config/", "TOML location"),
            ("proxy_pass http://localhost:8000", "Proxy to backend :8000"),
            ("limit_req zone=toml", "Rate limiting for TOML"),
        ]
        found = 0
        for needle, desc in checks:
            if needle in nginx_content:
                print(f"‚úÖ {desc}")
                found += 1
            else:
                print(f"‚ùå {desc} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"üìä Nginx checks: {found}/{len(checks)}")
        return found == len(checks)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Nginx –∫–æ–Ω—Ñ–∏–≥–∞: {e}")
        return False

def test_deploy_scripts():
    """–¢–µ—Å—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–µ–ø–ª–æ—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–µ–ø–ª–æ—è...")
    
    required_files = [
        "DEPLOYMENT_GUIDE.md",
        "scripts/optimize_performance.py",
        "scripts/test_e2e_all_scenarios.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º E2E —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç
        with open("scripts/test_e2e_all_scenarios.py", "r") as f:
            e2e_content = f.read()
        
        e2e_tests = [
            "test_infrastructure_health",
            "test_api_availability",
            "test_token_lifecycle_scenario",
            "test_birdeye_integration",
            "test_scoring_engine",
            "test_celery_workers",
            "test_toml_export_scenario",
            "test_full_data_flow"
        ]
        
        for test in e2e_tests:
            if f"def {test}" not in e2e_content:
                print(f"‚ùå E2E —Ç–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {test}")
                return False
        
        print("‚úÖ E2E —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω—ã–π")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫—Ä–∏–ø—Ç–æ–≤: {e}")
        return False

def test_cicd_integration():
    """–¢–µ—Å—Ç CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º GitHub Actions workflow
        with open(".github/workflows/deploy.yml", "r") as f:
            workflow_content = f.read()
        
        workflow_jobs = [
            "build-and-test",
            "build-images",
            "deploy",
            "e2e-test"
        ]
        
        for job in workflow_jobs:
            if f"{job}:" in workflow_content:
                print(f"‚úÖ Job {job} –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            else:
                print(f"‚ùå Job {job} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç—ã
        required_secrets = [
            "VPS_SSH_KEY",
            "VPS_HOST",
            "DATABASE_PASSWORD",
            "SECRET_KEY",
            "BIRDEYE_API_KEY"
        ]
        
        for secret in required_secrets:
            if f"secrets.{secret}" in workflow_content:
                print(f"‚úÖ Secret {secret} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
            else:
                print(f"‚ùå Secret {secret} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("‚úÖ CI/CD workflow –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ CI/CD: {e}")
        return False

def test_api_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ main.py
        with open("backend/app/main.py", "r") as f:
            main_content = f.read()
        
        required_routers = [
            "tokens_router",
            "pools_router",
            "system_router",
            "health_router",
            "websocket_router",
            "birdeye_router",
            "scoring_router",
            "lifecycle_router",
            "toml_export_router",
            "celery_router",
            "realtime_router"
        ]
        
        for router in required_routers:
            if router in main_content:
                print(f"‚úÖ {router} –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                print(f"‚ùå {router} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ realtime —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º /api
        if "app.include_router(realtime_router, prefix=\"/api\")" in main_content:
            print("‚úÖ Real-time —Ä–æ—É—Ç–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            print("‚ùå Real-time —Ä–æ—É—Ç–µ—Ä –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
        
        print("‚úÖ –í—Å–µ API —Ä–æ—É—Ç–µ—Ä—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_frontend_realtime():
    """–¢–µ—Å—Ç frontend real-time –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ frontend real-time...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket hook
        with open("frontend/src/hooks/useWebSocket.ts", "r") as f:
            websocket_content = f.read()
        
        required_hooks = [
            "useWebSocket",
            "useTokenUpdates", 
            "useScoringUpdates",
            "useSystemStatsUpdates",
            "useLifecycleEvents",
            "useCeleryStatus"
        ]
        
        for hook in required_hooks:
            if f"export function {hook}" in websocket_content:
                print(f"‚úÖ Hook {hook} —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
            else:
                print(f"‚ùå Hook {hook} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã
        required_types = [
            "TokenUpdate",
            "ScoringUpdate", 
            "SystemStatsUpdate",
            "LifecycleEvent"
        ]
        
        for type_name in required_types:
            if f"interface {type_name}" in websocket_content:
                print(f"‚úÖ Type {type_name} –æ–ø—Ä–µ–¥–µ–ª–µ–Ω")
            else:
                print(f"‚ùå Type {type_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("‚úÖ Frontend real-time –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ frontend real-time: {e}")
        return False

def test_system_completeness():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        with open("doc/tasklist.md", "r") as f:
            tasklist_content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏—Ç–µ—Ä–∞—Ü–∏–π
        iterations = [
            "| 1Ô∏è‚É£ | ‚úÖ",
            "| 2Ô∏è‚É£ | ‚úÖ", 
            "| 3Ô∏è‚É£ | ‚úÖ",
            "| 4Ô∏è‚É£ | ‚úÖ",
            "| 5Ô∏è‚É£ | ‚úÖ",
            "| 6Ô∏è‚É£ | ‚úÖ", 
            "| 7Ô∏è‚É£ | ‚úÖ",
            "| 8Ô∏è‚É£ | ‚úÖ",
            "| 9Ô∏è‚É£ | ‚úÖ",
            "| üîü | ‚úÖ"
        ]
        
        completed_iterations = 0
        
        for iteration in iterations:
            if iteration in tasklist_content:
                completed_iterations += 1
            else:
                print(f"‚ùå –ò—Ç–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {iteration}")
        
        print(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {completed_iterations}/{len(iterations)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º README
        with open("README.md", "r") as f:
            readme_content = f.read()
        
        if "10 –∏–∑ 11 ‚úÖ" in readme_content:
            print("‚úÖ README –∞–∫—Ç—É–∞–ª–µ–Ω")
        else:
            print("‚ùå README –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        required_docs = [
            "doc/vision.md",
            "doc/conventions.md", 
            "doc/tasklist.md",
            "doc/functional_task.md",
            "doc/bot_integration.md"
        ]
        
        docs_complete = all(os.path.exists(doc) for doc in required_docs)
        print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {'–ø–æ–ª–Ω–∞—è' if docs_complete else '–Ω–µ–ø–æ–ª–Ω–∞—è'}")
        
        return completed_iterations >= 9 and docs_complete  # –ú–∏–Ω–∏–º—É–º 9 –∏–∑ 10 + –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª–Ω–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False

def test_production_readiness():
    """–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production...")
    
    try:
        production_features = [
            ("DEPLOYMENT_GUIDE.md", "Deployment guide"),
            ("deploy/nginx-system.conf", "System Nginx config"),
            (".github/workflows/deploy.yml", "CI/CD pipeline"),
            ("scripts/optimize_performance.py", "Performance optimizer"),
            ("scripts/test_e2e_all_scenarios.py", "E2E testing")
        ]
        
        features_ready = 0
        
        for file_path, description in production_features:
            if os.path.exists(file_path):
                print(f"‚úÖ {description}")
                features_ready += 1
            else:
                print(f"‚ùå {description} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º environment.example
        try:
            with open("environment.example", "r") as f:
                env_content = f.read()
            
            required_vars = [
                "DATABASE_PASSWORD",
                "SECRET_KEY",
                "BIRDEYE_API_KEY",
                "CORS_ORIGINS"
            ]
            
            env_vars_ready = 0
            for var in required_vars:
                if var in env_content:
                    env_vars_ready += 1
            
            print(f"‚úÖ Environment variables: {env_vars_ready}/{len(required_vars)} documented")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Environment check failed: {e}")
        
        print(f"üìä Production features: {features_ready}/{len(production_features)}")
        
        return features_ready >= len(production_features) - 1  # –í—Å–µ –∫—Ä–æ–º–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–æ–π
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ production –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {e}")
        return False

def test_memory_optimizations():
    """–¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø–∞–º—è—Ç–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π –ø–∞–º—è—Ç–∏...")
    
    try:
        # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–π –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ (–æ—Ü–µ–Ω–æ—á–Ω–æ)
        estimated_memory = {
            "postgres": 150,
            "redis": 100,
            "backend": 250,
            "celery_worker": 150,
            "celery_beat": 80,
            "nginx": 50,
            "system_overhead": 200
        }
        
        total_memory = sum(estimated_memory.values())
        print(f"üìä Estimated total memory usage: {total_memory}MB ({total_memory/1024:.1f}GB)")
        
        memory_ok = total_memory <= 1900  # –û—Å—Ç–∞–≤–ª—è–µ–º 100MB –±—É—Ñ–µ—Ä –æ—Ç 2GB
        if memory_ok:
            print("‚úÖ Memory usage within 2GB limit")
        else:
            print(f"‚ùå Memory usage exceeds safe limit: {total_memory}MB > 1900MB")
        
        return memory_ok
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ memory –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {e}")
        return False

def test_all_modules_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        with open("backend/app/api/__init__.py", "r") as f:
            api_init_content = f.read()
        
        all_routers = [
            "tokens_router",
            "pools_router", 
            "system_router",
            "health_router",
            "websocket_router",
            "birdeye_router",
            "scoring_router",
            "lifecycle_router",
            "toml_export_router",
            "celery_router",
            "realtime_router"
        ]
        
        routers_found = 0
        for router in all_routers:
            if router in api_init_content:
                routers_found += 1
            else:
                print(f"‚ùå Router –Ω–µ –Ω–∞–π–¥–µ–Ω: {router}")
        
        print(f"‚úÖ API routers: {routers_found}/{len(all_routers)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Celery tasks –≤–∫–ª—é—á–µ–Ω–∏–µ
        with open("backend/app/core/celery_app.py", "r") as f:
            celery_content = f.read()
        
        celery_modules = [
            "app.workers.websocket_tasks",
            "app.workers.birdeye_tasks",
            "app.workers.scoring_tasks", 
            "app.workers.lifecycle_tasks",
            "app.workers.toml_tasks",
            "app.workers.celery_health_tasks"
        ]
        
        celery_modules_found = 0
        for module in celery_modules:
            if module in celery_content:
                celery_modules_found += 1
        
        print(f"‚úÖ Celery modules: {celery_modules_found}/{len(celery_modules)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º beat schedule
        beat_tasks = [
            "fetch-active-tokens-metrics",
            "calculate-active-tokens-scores",
            "monitor-initial-tokens",
            "generate-toml-config",
            "celery-system-monitoring"
        ]
        
        beat_tasks_found = 0
        for task in beat_tasks:
            if task in celery_content:
                beat_tasks_found += 1
        
        print(f"‚úÖ Beat schedule tasks: {beat_tasks_found}/{len(beat_tasks)}")
        
        return (routers_found >= len(all_routers) - 1 and 
                celery_modules_found >= len(celery_modules) - 1 and 
                beat_tasks_found >= len(beat_tasks) - 1)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π: {e}")
        return False

def test_functional_requirements():
    """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –§–ó...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏–∑ –§–ó –ø–æ–∫—Ä—ã—Ç—ã
        fz_scenarios = [
            ("WebSocket token discovery", "app/core/data_sources/pumpportal_websocket.py"),
            ("Birdeye API integration", "app/core/data_sources/birdeye_client.py"),
            ("Token lifecycle management", "app/core/lifecycle/manager.py"),
            ("Scoring engine", "app/core/scoring/hybrid_momentum_v1.py"),
            ("TOML export for bot", "app/core/toml_export/generator.py"),
            ("Admin panel", "frontend/src/pages/AdminPage.tsx")
        ]
        
        scenarios_implemented = 0
        
        for scenario_name, file_path in fz_scenarios:
            if os.path.exists(f"backend/{file_path}") or os.path.exists(file_path):
                print(f"‚úÖ {scenario_name}")
                scenarios_implemented += 1
            else:
                print(f"‚ùå {scenario_name} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –§–ó
        with open("backend/app/models/token.py", "r") as f:
            token_content = f.read()
        
        fz_statuses = ["INITIAL", "ACTIVE", "ARCHIVED"]
        statuses_implemented = all(status in token_content for status in fz_statuses)
        
        print(f"‚úÖ Token statuses: {'–≤—Å–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã' if statuses_implemented else '–Ω–µ –≤—Å–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º scoring —Ñ–æ—Ä–º—É–ª—É –∏–∑ –§–ó
        with open("backend/app/core/scoring/hybrid_momentum_v1.py", "r") as f:
            scoring_content = f.read()
        
        fz_components = ["Tx_Accel", "Vol_Momentum", "Holder_Growth", "Orderflow_Imbalance"]
        components_implemented = all(component.lower().replace("_", "") in scoring_content.lower() for component in fz_components)
        
        print(f"‚úÖ Scoring components: {'–≤—Å–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã' if components_implemented else '–Ω–µ –≤—Å–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã'}")
        
        print(f"üìä –§–ó scenarios: {scenarios_implemented}/{len(fz_scenarios)}")
        
        return (scenarios_implemented >= len(fz_scenarios) - 1 and 
                statuses_implemented and 
                components_implemented)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –§–ó: {e}")
        return False

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ò–¢–ï–†–ê–¶–ò–ò 11")
    print("=" * 50)
    print("üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø - PRODUCTION READY")
    print("=" * 50)
    
    tests = [
        ("Real-time —Å–∏—Å—Ç–µ–º–∞", test_realtime_structure),
        ("Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_production_config),
        ("–°–∫—Ä–∏–ø—Ç—ã –¥–µ–ø–ª–æ—è", test_deploy_scripts),
        ("CI/CD –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_cicd_integration),
        ("API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_api_integration),
        ("Frontend real-time", test_frontend_realtime),
        ("Memory –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", test_memory_optimizations),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π", test_all_modules_integration),
        ("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –§–ó", test_functional_requirements),
        ("–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã", test_system_completeness),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    success_rate = passed / len(tests)
    
    if success_rate >= 0.9:  # 90% —Ç–µ—Å—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏
        print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø 11 –ì–û–¢–û–í–ê!")
        print("üöÄ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION –î–ï–ü–õ–û–Æ!")
        print("\nüèÅ –§–ò–ù–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
        print("1. –ü–æ–ª–Ω—ã–π E2E —Ç–µ—Å—Ç:")
        print("   uvicorn app.main:app --host 0.0.0.0 --port 8000 (–∏–∑ –ø–∞–ø–∫–∏ backend)")
        print("   python3 scripts/test_e2e_all_scenarios.py --mode full")
        print("2. Performance –∞–Ω–∞–ª–∏–∑:")
        print("   python3 scripts/optimize_performance.py --mode all")
        print("3. Production –¥–µ–ø–ª–æ–π: —Å–º. DEPLOYMENT_GUIDE.md (systemd + Nginx)")
        print("\nüåê PRODUCTION URLs:")
        print("   Main: http://tothemoon.sh1z01d.ru")
        print("   API: http://tothemoon.sh1z01d.ru/api/docs")
        print("   Bot: http://tothemoon.sh1z01d.ru/config/dynamic_strategy.toml")
        print("\nü§ñ NotArb –±–æ—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
        print("   URL: http://tothemoon.sh1z01d.ru/config/dynamic_strategy.toml")
        print("   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        print("   –§–æ—Ä–º–∞—Ç: TOML —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ –ø—É–ª–∞–º–∏")
        return True
    else:
        print("‚ùå –ò–¢–ï–†–ê–¶–ò–Ø 11 –ù–ï –ì–û–¢–û–í–ê")
        print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ {success_rate:.1%} —Ç–µ—Å—Ç–æ–≤")
        print("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ production –¥–µ–ø–ª–æ–µ–º")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
