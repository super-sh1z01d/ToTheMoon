#!/usr/bin/env python3
"""
Test Token Lifecycle Management
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ç–æ–∫–µ–Ω–æ–≤
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime, timedelta
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))


class LifecycleTester:
    """
    –¢–µ—Å—Ç–µ—Ä –¥–ª—è lifecycle —Å–∏—Å—Ç–µ–º—ã
    """
    
    def __init__(self):
        self.manager = None
        
    async def test_lifecycle_manager(self) -> bool:
        """–¢–µ—Å—Ç lifecycle –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        print("üîç –¢–ï–°–¢ LIFECYCLE MANAGER")
        print("=" * 40)
        
        try:
            from app.core.lifecycle.manager import lifecycle_manager
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = lifecycle_manager.get_stats()
            
            print("‚úÖ Lifecycle manager —Å–æ–∑–¥–∞–Ω")
            print(f"   Initial tokens checked: {stats.get('initial_tokens_checked', 0)}")
            print(f"   Active tokens checked: {stats.get('active_tokens_checked', 0)}")
            print(f"   Tokens activated: {stats.get('tokens_activated', 0)}")
            print(f"   Tokens archived: {stats.get('tokens_archived', 0)}")
            print(f"   Errors: {stats.get('errors', 0)}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è lifecycle manager: {e}")
            return False

    async def test_activation_logic(self) -> bool:
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        print("\nüîç –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ê–ö–¢–ò–í–ê–¶–ò–ò")
        print("=" * 35)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not os.getenv("DATABASE_URL"):
            print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î")
            return True
        
        try:
            from app.database import SessionLocal
            from app.core.lifecycle.manager import lifecycle_manager
            from app.crud import token_crud, system_crud
            from app.models.token import TokenStatus
            
            if not SessionLocal:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return False
            
            db = SessionLocal()
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                min_liquidity = system_crud.get_value(db, key="MIN_LIQUIDITY_USD", default=500)
                min_tx_count = system_crud.get_value(db, key="MIN_TX_COUNT", default=300)
                
                print(f"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
                print(f"   MIN_LIQUIDITY_USD: ${min_liquidity}")
                print(f"   MIN_TX_COUNT: {min_tx_count}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ Initial —Ç–æ–∫–µ–Ω—ã
                initial_tokens = token_crud.get_by_status(db, status=TokenStatus.INITIAL, limit=5)
                
                if initial_tokens:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(initial_tokens)} Initial —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    
                    for token in initial_tokens[:2]:  # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 2
                        print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º {token.token_address[:8]}...")
                        
                        # –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞)
                        should_activate = await lifecycle_manager._should_activate_token(
                            token, min_liquidity, min_tx_count, db
                        )
                        
                        print(f"   –ê–∫—Ç–∏–≤–∞—Ü–∏—è: {'‚úÖ –î–ê' if should_activate else '‚ùå –ù–ï–¢'}")
                else:
                    print("‚ö†Ô∏è  –ù–µ—Ç Initial —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    print("   –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ API")
                
                return True
                
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
            return False

    async def test_archival_logic(self) -> bool:
        """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –ø–æ —Ç–∞–π–º–∞—É—Ç—É"""
        print("\nüîç –¢–ï–°–¢ –õ–û–ì–ò–ö–ò –ê–†–•–ò–í–ê–¶–ò–ò")
        print("=" * 35)
        
        try:
            from app.core.lifecycle.manager import lifecycle_manager
            from app.models.token import Token, TokenStatus
            from datetime import datetime, timedelta
            
            # –°–æ–∑–¥–∞–µ–º mock —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            class MockToken:
                def __init__(self, hours_ago: int):
                    self.status = TokenStatus.INITIAL
                    self.created_at = datetime.now() - timedelta(hours=hours_ago)
                    self.token_address = f"MockToken{hours_ago}hours"
            
            # –¢–µ—Å—Ç —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–∑–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞
            test_cases = [
                (1, False, "1 —á–∞—Å - –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å"),
                (12, False, "12 —á–∞—Å–æ–≤ - –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å"), 
                (23, False, "23 —á–∞—Å–∞ - –Ω–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å"),
                (25, True, "25 —á–∞—Å–æ–≤ - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å"),
                (48, True, "48 —á–∞—Å–æ–≤ - –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
            ]
            
            timeout_hours = 24
            
            for hours_ago, should_archive, description in test_cases:
                mock_token = MockToken(hours_ago)
                result = lifecycle_manager._should_archive_by_timeout(mock_token, timeout_hours)
                
                status = "‚úÖ" if result == should_archive else "‚ùå"
                print(f"   {status} {description}: {result}")
                
                if result != should_archive:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –¥–ª—è {hours_ago} —á–∞—Å–æ–≤")
                    return False
            
            print("‚úÖ –õ–æ–≥–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {e}")
            return False

    async def test_configuration_loading(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüîç –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("=" * 42)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not os.getenv("DATABASE_URL"):
            print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î")
            return True
        
        try:
            from app.database import SessionLocal
            from app.crud import system_crud
            
            if not SessionLocal:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return False
            
            db = SessionLocal()
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã lifecycle
                lifecycle_params = [
                    ("MIN_LIQUIDITY_USD", 500),
                    ("MIN_TX_COUNT", 300),
                    ("ARCHIVAL_TIMEOUT_HOURS", 24),
                    ("LOW_SCORE_HOURS", 6),
                    ("LOW_ACTIVITY_CHECKS", 10)
                ]
                
                for param_key, default_value in lifecycle_params:
                    value = system_crud.get_value(db, key=param_key, default=default_value)
                    
                    if value is not None:
                        print(f"‚úÖ {param_key}: {value}")
                    else:
                        print(f"‚ùå {param_key}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return False
                
                print("‚úÖ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return True
                
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False


async def quick_lifecycle_test():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç lifecycle –±–µ–∑ –ë–î
    """
    print("üîç –ë–´–°–¢–†–´–ô –¢–ï–°–¢ LIFECYCLE")
    print("=" * 35)
    
    try:
        from app.core.lifecycle.manager import TokenLifecycleManager
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
        manager = TokenLifecycleManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = manager.get_stats()
        
        required_stats = [
            "initial_tokens_checked",
            "active_tokens_checked", 
            "tokens_activated",
            "tokens_archived",
            "tokens_deactivated",
            "errors"
        ]
        
        for stat_key in required_stats:
            if stat_key not in stats:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stat_key}")
                return False
        
        print("‚úÖ Lifecycle manager —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫: {len(stats)} –ø–æ–ª–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        return False


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="Test Token Lifecycle Management")
    parser.add_argument(
        "--mode", 
        choices=["quick", "manager", "activation", "archival", "config", "all"], 
        default="quick",
        help="Test mode"
    )
    
    args = parser.parse_args()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï LIFECYCLE –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if args.mode == "quick":
        success = asyncio.run(quick_lifecycle_test())
    elif args.mode == "manager":
        tester = LifecycleTester()
        success = asyncio.run(tester.test_lifecycle_manager())
    elif args.mode == "activation":
        tester = LifecycleTester()
        success = asyncio.run(tester.test_activation_logic())
    elif args.mode == "archival":
        tester = LifecycleTester()
        success = asyncio.run(tester.test_archival_logic())
    elif args.mode == "config":
        tester = LifecycleTester()
        success = asyncio.run(tester.test_configuration_loading())
    elif args.mode == "all":
        tester = LifecycleTester()
        
        tests = [
            ("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç", quick_lifecycle_test()),
            ("Lifecycle Manager", tester.test_lifecycle_manager()),
            ("–õ–æ–≥–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", tester.test_activation_logic()),
            ("–õ–æ–≥–∏–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏", tester.test_archival_logic()),
            ("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", tester.test_configuration_loading())
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_coro in tests:
            print(f"\nüîÑ {test_name}...")
            try:
                if asyncio.run(test_coro):
                    passed += 1
                    print("‚úÖ –ü—Ä–æ–π–¥–µ–Ω")
                else:
                    failed += 1
                    print("‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω")
            except Exception as e:
                failed += 1
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print(f"\nüìä –ò–¢–û–ì–ò: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        success = failed == 0
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Lifecycle System –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        if args.mode == "quick":
            print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print("   python3 scripts/test_lifecycle.py --mode all")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Lifecycle System –Ω–µ —É–¥–∞–ª–æ—Å—å")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
