#!/usr/bin/env python3
"""
Test script for Iteration 6: Birdeye API Integration
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —à–µ—Å—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def test_birdeye_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Birdeye –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Birdeye –º–æ–¥—É–ª–µ–π...")
    
    required_files = [
        "backend/app/core/data_sources/birdeye_client.py",
        "backend/app/workers/birdeye_tasks.py",
        "backend/app/api/birdeye.py",
        "backend/app/crud/metrics.py",
        "scripts/test_birdeye.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Birdeye –º–æ–¥—É–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def test_birdeye_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Birdeye –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ Birdeye –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –¢–µ—Å—Ç CRUD –º–æ–¥—É–ª–µ–π (–Ω–µ —Ç—Ä–µ–±—É—é—Ç aiohttp)
        from app.crud.metrics import (
            token_metrics_crud,
            token_scores_crud,
            birdeye_raw_data_crud
        )
        
        print("‚úÖ CRUD –º–æ–¥—É–ª–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        
        # –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö (—Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
        try:
            from app.core.data_sources.birdeye_client import (
                TokenOverview,
                TokenTrades,
                BirdeyeRateLimitError,
                BirdeyeAPIError
            )
            print("‚úÖ –ö–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö Birdeye –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        except ImportError as e:
            print(f"‚ö†Ô∏è  –û—Å–Ω–æ–≤–Ω—ã–µ Birdeye –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        
        # –¢–µ—Å—Ç API —Ä–æ—É—Ç–µ—Ä–∞
        try:
            from app.api.birdeye import router as birdeye_router
            from app.api import birdeye_router as main_birdeye_router
            
            if birdeye_router and main_birdeye_router:
                print("‚úÖ Birdeye API —Ä–æ—É—Ç–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è")
        except ImportError as e:
            print(f"‚ö†Ô∏è  Birdeye API —Ä–æ—É—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä–∏–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ main.py
            with open("backend/app/main.py", "r") as f:
                main_content = f.read()
            
            if "birdeye_router" in main_content:
                print("‚úÖ Birdeye —Ä–æ—É—Ç–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
            else:
                print("‚ùå Birdeye —Ä–æ—É—Ç–µ—Ä –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
                return False
        
        # –¢–µ—Å—Ç Celery tasks
        try:
            from app.workers.birdeye_tasks import (
                fetch_token_metrics_task,
                fetch_metrics_for_active_tokens_task,
                test_birdeye_connection_task
            )
            print("‚úÖ Birdeye Celery tasks –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è")
        except ImportError as e:
            print(f"‚ö†Ô∏è  Birdeye Celery tasks –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Birdeye –º–æ–¥—É–ª–µ–π: {e}")
        return False

def test_birdeye_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ Birdeye"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ Birdeye...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        with open("backend/app/core/data_sources/birdeye_client.py", "r") as f:
            birdeye_content = f.read()
        
        required_classes = [
            "class BirdeyeClient",
            "class BirdeyeManager", 
            "class TokenOverview",
            "class TokenTrades"
        ]
        
        for class_name in required_classes:
            if class_name not in birdeye_content:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {class_name}")
                return False
        
        required_methods = [
            "get_token_overview",
            "get_token_trades",
            "fetch_token_metrics",
            "save_token_metrics"
        ]
        
        for method_name in required_methods:
            if f"def {method_name}" not in birdeye_content:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ {method_name}")
                return False
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ Birdeye –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def test_data_classes():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª mock —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists("backend/app/core/data_sources/birdeye_mock.py"):
            print("‚ùå Mock —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ mock —Ñ–∞–π–ª–∞
        with open("backend/app/core/data_sources/birdeye_mock.py", "r") as f:
            mock_content = f.read()
        
        if "class MockBirdeyeClient" not in mock_content:
            print("‚ùå MockBirdeyeClient –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        if "def use_mock_birdeye" not in mock_content:
            print("‚ùå –§—É–Ω–∫—Ü–∏—è use_mock_birdeye –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") 
            return False
        
        print("‚úÖ –ö–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö –∏ mock –≤–µ—Ä—Å–∏—è —Å–æ–∑–¥–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_crud_operations():
    """–¢–µ—Å—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –º–µ—Ç—Ä–∏–∫"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–π...")
    
    try:
        from app.crud.metrics import (
            CRUDTokenMetrics,
            CRUDTokenScores, 
            CRUDBirdeyeRawData
        )
        from app.models.metrics import TokenMetrics, TokenScores
        from app.models.raw_data import BirdeyeRawData
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ CRUD –∫–ª–∞—Å—Å–æ–≤
        metrics_crud = CRUDTokenMetrics(TokenMetrics)
        scores_crud = CRUDTokenScores(TokenScores)
        raw_data_crud = CRUDBirdeyeRawData(BirdeyeRawData)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        required_methods = ['get', 'get_multi', 'create', 'update', 'remove']
        for crud, name in [(metrics_crud, 'metrics'), (scores_crud, 'scores'), (raw_data_crud, 'raw_data')]:
            for method in required_methods:
                if not hasattr(crud, method):
                    print(f"‚ùå {name} CRUD –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ {method}")
                    return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if not hasattr(metrics_crud, 'get_by_token'):
            print("‚ùå metrics CRUD –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ get_by_token")
            return False
            
        if not hasattr(raw_data_crud, 'cleanup_expired_data'):
            print("‚ùå raw_data CRUD –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ cleanup_expired_data")
            return False
        
        print("‚úÖ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è CRUD: {e}")
        return False

def test_environment_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ environment"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ environment...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º environment.example
        with open("environment.example", "r") as f:
            env_content = f.read()
        
        if "BIRDEYE_API_KEY" not in env_content:
            print("‚ùå BIRDEYE_API_KEY –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ environment.example")
            return False
            
        if "BIRDEYE_BASE_URL" not in env_content:
            print("‚ùå BIRDEYE_BASE_URL –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ environment.example")
            return False
        
        print("‚úÖ Environment –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_api_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ main.py
        with open("backend/app/main.py", "r") as f:
            main_content = f.read()
        
        if "birdeye_router" not in main_content:
            print("‚ùå Birdeye —Ä–æ—É—Ç–µ—Ä –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ Celery
        with open("backend/app/core/celery_app.py", "r") as f:
            celery_content = f.read()
        
        if "app.workers.birdeye_tasks" not in celery_content:
            print("‚ùå Birdeye tasks –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ Celery")
            return False
            
        if "fetch_metrics_for_active_tokens" not in celery_content:
            print("‚ùå Birdeye –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≤ beat schedule")
            return False
        
        print("‚úÖ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API: {e}")
        return False

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ò–¢–ï–†–ê–¶–ò–ò 6")
    print("=" * 50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ Birdeye –º–æ–¥—É–ª–µ–π", test_birdeye_structure),
        ("–ò–º–ø–æ—Ä—Ç Birdeye –º–æ–¥—É–ª–µ–π", test_birdeye_imports),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ Birdeye", test_birdeye_file_structure),
        ("–ö–ª–∞—Å—Å—ã –¥–∞–Ω–Ω—ã—Ö –∏ mock", test_data_classes),
        ("CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏", test_crud_operations),
        ("Environment –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_environment_config),
        ("API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", test_api_integration),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    if failed == 0:
        print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø 6 –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ .env —Ñ–∞–π–ª —Å BIRDEYE_API_KEY")
        print("2. uvicorn app.main:app --host 0.0.0.0 --port 8000 (–∏–∑ –ø–∞–ø–∫–∏ backend)")
        print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Birdeye API:")
        print("   python3 scripts/test_birdeye.py --mode quick")
        print("   python3 scripts/test_birdeye.py --mode full")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints:")
        print("   - GET http://localhost:8000/api/birdeye/status")
        print("   - POST http://localhost:8000/api/birdeye/test")
        print("   - POST http://localhost:8000/api/birdeye/fetch/{token_address}")
        print("   - GET http://localhost:8000/api/birdeye/stats")
        print("5. –¢–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º:")
        print("   curl -X POST http://localhost:8000/api/birdeye/fetch/So11111111111111111111111111111111111111112")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
