#!/usr/bin/env python3
"""
Test script for Iteration 9: TOML Export for Bot
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–µ–≤—è—Ç–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def test_toml_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã TOML –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã TOML –º–æ–¥—É–ª–µ–π...")
    
    required_files = [
        "backend/app/core/toml_export/__init__.py",
        "backend/app/core/toml_export/generator.py",
        "backend/app/workers/toml_tasks.py",
        "backend/app/api/toml_export.py",
        "scripts/test_toml_export.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        return False
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ TOML –º–æ–¥—É–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    return True

def test_toml_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ TOML –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ TOML –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ toml –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        try:
            import toml
            print("‚úÖ TOML –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞")
        except ImportError:
            print("‚ùå TOML –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
        with open("backend/app/core/toml_export/generator.py", "r") as f:
            generator_content = f.read()
        
        required_methods = [
            "generate_dynamic_strategy_toml",
            "_get_top_tokens_for_export",
            "_load_export_config",
            "_build_toml_config",
            "get_export_preview"
        ]
        
        for method in required_methods:
            if f"def {method}" not in generator_content:
                print(f"‚ùå –ú–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {method}")
                return False
        
        print("‚úÖ TOML –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ—Ç–æ–¥—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
        with open("backend/app/api/toml_export.py", "r") as f:
            api_content = f.read()
        
        if "dynamic_strategy.toml" not in api_content:
            print("‚ùå –û—Å–Ω–æ–≤–Ω–æ–π TOML endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        if "PlainTextResponse" not in api_content:
            print("‚ùå PlainTextResponse –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è TOML")
            return False
        
        print("‚úÖ TOML API endpoints —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ TOML –º–æ–¥—É–ª–µ–π: {e}")
        return False

def test_celery_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Celery"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Celery...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ –≤ Celery
        with open("backend/app/core/celery_app.py", "r") as f:
            celery_content = f.read()
        
        if "app.workers.toml_tasks" not in celery_content:
            print("‚ùå TOML tasks –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã –≤ Celery")
            return False
            
        required_tasks = [
            "generate-toml-config",
            "validate-toml-export",
            "toml-export-stats"
        ]
        
        for task in required_tasks:
            if task not in celery_content:
                print(f"‚ùå Task –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ schedule: {task}")
                return False
        
        print("‚úÖ Celery –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Celery: {e}")
        return False

def test_api_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é TOML —Ä–æ—É—Ç–µ—Ä–∞
        with open("backend/app/main.py", "r") as f:
            main_content = f.read()
        
        if "toml_export_router" not in main_content:
            print("‚ùå TOML export —Ä–æ—É—Ç–µ—Ä –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ main.py")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω –ë–ï–ó –ø—Ä–µ—Ñ–∏–∫—Å–∞ /api
        if "app.include_router(toml_export_router)" not in main_content:
            print("‚ùå TOML —Ä–æ—É—Ç–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞")
            return False
        
        print("‚úÖ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}")
        return False

def test_nginx_configuration():
    """–¢–µ—Å—Ç Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        with open("deploy/nginx-system.conf", "r") as f:
            nginx_content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è /config/
        if "location /config/" not in nginx_content:
            print("‚ùå Nginx –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è /config/ location")
            return False
            
        if "zone=toml" not in nginx_content:
            print("‚ùå Rate limiting –¥–ª—è TOML –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            return False
            
        if "expires 5m" not in nginx_content and "expires 1m" not in nginx_content:
            print("‚ùå –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ TOML –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
            return False
        
        if "proxy_pass http://localhost:8000" not in nginx_content:
            print("‚ùå Nginx –Ω–µ –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –Ω–∞ backend :8000")
            return False
        
        print("‚úÖ Nginx –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Nginx: {e}")
        return False

def test_requirements_update():
    """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements.txt"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è requirements...")
    
    try:
        with open("backend/requirements.txt", "r") as f:
            requirements_content = f.read()
        
        if "toml==" not in requirements_content:
            print("‚ùå TOML –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ requirements.txt")
            return False
        
        print("‚úÖ Requirements –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ requirements: {e}")
        return False

def test_functional_requirements():
    """–¢–µ—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –§–ó...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–æ–≥–∏–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –§–ó
        with open("backend/app/core/toml_export/generator.py", "r") as f:
            generator_content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –§–ó
        fz_requirements = [
            "status=TokenStatus.ACTIVE",  # –û—Ç–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
            "min_score_for_config",       # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å–∫–æ—Ä—É
            "score_value",                # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∫–æ—Ä—É
            "limit=top_count",           # –¢–æ–ø-3 (–∏–ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
            "active_only=True"           # –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É–ª—ã
        ]
        
        for requirement in fz_requirements:
            if requirement not in generator_content:
                print(f"‚ùå –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –§–ó –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {requirement}")
                return False
        
        print("‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º endpoint URL
        with open("backend/app/api/toml_export.py", "r") as f:
            api_content = f.read()
        
        if "/config/dynamic_strategy.toml" not in api_content:
            print("‚ùå URL endpoint –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –§–ó")
            return False
        
        print("‚úÖ URL endpoint —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –§–ó")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –§–ó: {e}")
        return False

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ò–¢–ï–†–ê–¶–ò–ò 9")
    print("=" * 50)
    
    tests = [
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ TOML –º–æ–¥—É–ª–µ–π", test_toml_structure),
        ("–ò–º–ø–æ—Ä—Ç TOML –º–æ–¥—É–ª–µ–π", test_toml_imports),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Celery", test_celery_integration),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è API", test_api_integration),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx", test_nginx_configuration),
        ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ requirements", test_requirements_update),
        ("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –§–ó", test_functional_requirements),
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    if failed == 0:
        print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø 9 –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("1. uvicorn app.main:app --host 0.0.0.0 --port 8000 (–∏–∑ –ø–∞–ø–∫–∏ backend)")
        print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TOML:")
        print("   python3 scripts/test_toml_export.py --mode quick")
        print("   python3 scripts/test_toml_export.py --mode all")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ TOML endpoint:")
        print("   curl http://localhost:8000/config/dynamic_strategy.toml")
        print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API endpoints:")
        print("   - GET /config/preview")
        print("   - GET /config/validate") 
        print("   - GET /config/stats")
        print("   - GET /config/sample")
        print("5. –¢–µ—Å—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        print("   curl 'http://localhost:8000/config/dynamic_strategy.toml?min_score=0.8&top_count=5'")
        print("\nü§ñ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° NOTARB –ë–û–¢–û–ú:")
        print("   URL –¥–ª—è –±–æ—Ç–∞: http://tothemoon.sh1z01d.ru/config/dynamic_strategy.toml")
        print("   –§–æ—Ä–º–∞—Ç: TOML —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –∏ –ø—É–ª–∞–º–∏")
        print("   –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç")
        print("   –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: 1 –º–∏–Ω—É—Ç–∞")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
