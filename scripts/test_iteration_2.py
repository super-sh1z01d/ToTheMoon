#!/usr/bin/env python3
"""
Test script for Iteration 2: Data models and migrations
–¢–µ—Å—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Ç–æ—Ä–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π...")
    
    try:
        from app.models import (
            Base, Token, TokenStatusHistory, Pool, 
            TokenMetrics, TokenScores, SystemConfig, BirdeyeRawData
        )
        print("‚úÖ –í—Å–µ –º–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...")
    
    try:
        from app.database import engine
        from sqlalchemy import text
        with engine.connect() as conn:
            result = conn.execute(text("SELECT 1 as test"))
            row = result.fetchone()
            if row[0] == 1:
                print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
                return True
            else:
                print("‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞")
                return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def test_models_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π...")
    
    try:
        from app.models import Token, Pool, TokenMetrics, SystemConfig
        from app.models.token import TokenStatus, StatusChangeReason
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
        token_fields = ['id', 'token_address', 'status', 'created_at']
        for field in token_fields:
            if not hasattr(Token, field):
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ –º–æ–¥–µ–ª–∏ Token")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º enum'—ã
        if len(TokenStatus) != 3:
            print("‚ùå TokenStatus –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 –∑–Ω–∞—á–µ–Ω–∏—è")
            return False
            
        if len(StatusChangeReason) != 5:
            print("‚ùå StatusChangeReason –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 –∑–Ω–∞—á–µ–Ω–∏–π")
            return False
        
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–µ–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_alembic_files():
    """–¢–µ—Å—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π...")
    
    alembic_files = [
        "backend/alembic.ini",
        "backend/alembic/env.py", 
        "backend/alembic/script.py.mako",
        "backend/alembic/versions/20250914_0001_initial_schema.py",
        "backend/alembic/versions/20250914_0002_metrics_and_scores.py",
        "backend/alembic/versions/20250914_0003_partitioning.py",
        "backend/alembic/versions/20250914_0004_initial_config.py"
    ]
    
    missing_files = []
    for file_path in alembic_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π: {missing_files}")
        return False
    
    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –Ω–∞ –º–µ—Å—Ç–µ")
    return True

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    print("üß™ –¢–ï–°–¢ –ì–û–¢–û–í–ù–û–°–¢–ò –ò–¢–ï–†–ê–¶–ò–ò 2")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º environment
    if not os.getenv("DATABASE_URL"):
        print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç–µ—Å—Ç—ã –ë–î –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã")
        print("   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ .env –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ uvicorn + –º–∏–≥—Ä–∞—Ü–∏–∏")
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π", test_imports),
        ("–§–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π", test_alembic_files),
        ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–µ–π", test_models_structure),
    ]
    
    # –¢–µ—Å—Ç –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if os.getenv("DATABASE_URL"):
        tests.append(("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î", test_database_connection))
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        print(f"\nüîÑ {test_name}...")
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed} –ø—Ä–æ—à–ª–æ, {failed} –Ω–µ –ø—Ä–æ—à–ª–æ")
    
    if failed == 0:
        print("üéâ –ò–¢–ï–†–ê–¶–ò–Ø 2 –ì–û–¢–û–í–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ!")
        print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("1. python3 scripts/migrate.py")
        print("2. uvicorn app.main:app --host 0.0.0.0 --port 8000 (–∏–∑ –ø–∞–ø–∫–∏ backend)")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ http://localhost:8000/health, /api/system/stats, /api/tokens")
        return True
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
