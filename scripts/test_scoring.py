#!/usr/bin/env python3
"""
Test Scoring Engine
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
from decimal import Decimal

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))


class ScoringTester:
    """
    –¢–µ—Å—Ç–µ—Ä –¥–ª—è scoring engine
    """
    
    def __init__(self):
        self.manager = None
        
    async def test_hybrid_momentum_model(self) -> bool:
        """–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ Hybrid Momentum v1"""
        print("üîç –¢–ï–°–¢ –ú–û–î–ï–õ–ò HYBRID MOMENTUM V1")
        print("=" * 50)
        
        try:
            from app.core.scoring.hybrid_momentum_v1 import HybridMomentumV1Factory
            from app.core.scoring.base import TokenMetricsInput
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            model = HybridMomentumV1Factory.create_default()
            
            print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            print(f"   –ú–æ–¥–µ–ª—å: {model.MODEL_NAME} v{model.MODEL_VERSION}")
            print(f"   EWMA Alpha: {model.ewma_alpha}")
            print(f"   –í–µ—Å–∞: {model.weights.to_dict()}")
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            test_metrics = TokenMetricsInput(
                tx_count_5m=150,  # 150 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ 5 –º–∏–Ω—É—Ç
                tx_count_1h=1200,  # 1200 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ —á–∞—Å
                volume_5m_usd=Decimal("25000"),  # $25k –æ–±—ä–µ–º –∑–∞ 5–º
                volume_1h_usd=Decimal("180000"),  # $180k –æ–±—ä–µ–º –∑–∞ —á–∞—Å
                buys_volume_5m_usd=Decimal("15000"),  # $15k –ø–æ–∫—É–ø–∫–∏
                sells_volume_5m_usd=Decimal("10000"),  # $10k –ø—Ä–æ–¥–∞–∂–∏
                holders_count=2500,  # 2500 –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
                holders_1h_ago=2450,  # 2450 —á–∞—Å –Ω–∞–∑–∞–¥ (+50 —Ä–æ—Å—Ç)
                liquidity_usd=Decimal("750000"),  # $750k –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
                timestamp=datetime.now()
            )
            
            print("\nüìä –¢–µ—Å—Ç–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
            print(f"   TX 5m: {test_metrics.tx_count_5m}")
            print(f"   TX 1h: {test_metrics.tx_count_1h}")
            print(f"   Volume 5m: ${test_metrics.volume_5m_usd}")
            print(f"   Volume 1h: ${test_metrics.volume_1h_usd}")
            print(f"   Holders: {test_metrics.holders_count} (—Ä–æ—Å—Ç: +{test_metrics.holders_count - test_metrics.holders_1h_ago})")
            print(f"   Buys/Sells: ${test_metrics.buys_volume_5m_usd}/${test_metrics.sells_volume_5m_usd}")
            
            # –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞
            test_token = "TestToken111111111111111111111111111111"
            
            print(f"\nüßÆ –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –¥–ª—è {test_token[:8]}...")
            
            result = await model.calculate(test_token, test_metrics)
            
            print("‚úÖ –°–∫–æ—Ä —Ä–∞—Å—Å—á–∏—Ç–∞–Ω:")
            print(f"   Raw Score: {result.score_value:.4f}")
            print(f"   Smoothed Score: {result.score_smoothed:.4f}")
            print(f"   Execution Time: {result.execution_time_ms:.2f}ms")
            
            print("\nüìà –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
            components = result.components
            print(f"   TX Accel: {components.tx_accel:.4f} -> {components.tx_accel_smoothed:.4f}")
            print(f"   Vol Momentum: {components.vol_momentum:.4f} -> {components.vol_momentum_smoothed:.4f}")
            print(f"   Holder Growth: {components.holder_growth:.4f} -> {components.holder_growth_smoothed:.4f}")
            print(f"   Orderflow Imbalance: {components.orderflow_imbalance:.4f} -> {components.orderflow_imbalance_smoothed:.4f}")
            
            # –¢–µ—Å—Ç –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å EWMA
            print("\nüîÑ –¢–µ—Å—Ç EWMA —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è (–≤—Ç–æ—Ä–æ–π —Ä–∞—Å—á–µ—Ç)...")
            
            # –ú–µ–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
            test_metrics.tx_count_5m = 200  # –£–≤–µ–ª–∏—á–∏–ª—Å—è –∏–º–ø—É–ª—å—Å
            test_metrics.volume_5m_usd = Decimal("35000")  # –£–≤–µ–ª–∏—á–∏–ª—Å—è –æ–±—ä–µ–º
            
            result2 = await model.calculate(test_token, test_metrics, previous_result=result)
            
            print("‚úÖ –í—Ç–æ—Ä–æ–π —Ä–∞—Å—á–µ—Ç —Å EWMA:")
            print(f"   Raw Score: {result2.score_value:.4f}")
            print(f"   Smoothed Score: {result2.score_smoothed:.4f}")
            print(f"   Score Change: {result2.score_smoothed - result.score_smoothed:+.4f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
            return False

    async def test_scoring_manager(self) -> bool:
        """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞"""
        print("\nüîç –¢–ï–°–¢ SCORING MANAGER")
        print("=" * 40)
        
        try:
            from app.core.scoring.manager import scoring_manager
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
            models = scoring_manager.get_available_models()
            
            print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(models)}")
            for model in models:
                status = "‚úÖ" if model.get("available") else "‚ùå"
                print(f"   {status} {model.get('name')}: {model.get('description', 'N/A')}")
            
            # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = scoring_manager.get_stats()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
            print(f"   –°–∫–æ—Ä–æ–≤ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ: {stats.get('scores_calculated', 0)}")
            print(f"   –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
            print(f"   –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {stats.get('model_loaded')}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            return False

    async def test_configuration_loading(self) -> bool:
        """–¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüîç –¢–ï–°–¢ –ó–ê–ì–†–£–ó–ö–ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("=" * 45)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not os.getenv("DATABASE_URL"):
            print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î")
            return True
        
        try:
            from app.database import SessionLocal
            from app.core.scoring.manager import scoring_manager
            
            if not SessionLocal:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return False
            
            db = SessionLocal()
            
            try:
                # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                await scoring_manager.initialize_from_config(db)
                
                if scoring_manager.current_model:
                    print("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                    print(f"   –ú–æ–¥–µ–ª—å: {scoring_manager.model_name}")
                    
                    model_info = await scoring_manager.get_model_info()
                    print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {model_info.get('description')}")
                    print(f"   EWMA Alpha: {model_info.get('ewma_alpha')}")
                    
                    weights = model_info.get('components', {})
                    print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {len(weights)}")
                    
                    return True
                else:
                    print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    return False
                    
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False

    async def test_end_to_end_calculation(self) -> bool:
        """–¢–µ—Å—Ç end-to-end —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∞"""
        print("\nüîç –¢–ï–°–¢ END-TO-END –†–ê–°–ß–ï–¢–ê")
        print("=" * 40)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not os.getenv("DATABASE_URL"):
            print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º E2E —Ç–µ—Å—Ç")
            return True
        
        try:
            from app.database import SessionLocal
            from app.core.scoring.manager import scoring_manager
            from app.crud import token_crud
            
            if not SessionLocal:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return False
            
            db = SessionLocal()
            
            try:
                # –ò—â–µ–º —Ç–æ–∫–µ–Ω —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                test_token = "So11111111111111111111111111111111111111112"
                
                token = token_crud.get_by_address(db, token_address=test_token)
                if not token:
                    print(f"‚ö†Ô∏è  –¢–æ–∫–µ–Ω {test_token} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                    print("   –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –∏ –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                    return True  # –ù–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
                
                print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: {token.token_address[:8]}...")
                
                # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–æ—Ä–∞
                result = await scoring_manager.calculate_score_for_token(test_token, db)
                
                if result:
                    print("‚úÖ End-to-end —Ä–∞—Å—á–µ—Ç —É—Å–ø–µ—à–µ–Ω:")
                    print(f"   –°–∫–æ—Ä: {result.score_smoothed:.4f}")
                    print(f"   –ú–æ–¥–µ–ª—å: {result.model_name}")
                    print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time_ms:.2f}ms")
                    return True
                else:
                    print("‚ùå End-to-end —Ä–∞—Å—á–µ—Ç –Ω–µ —É–¥–∞–ª—Å—è")
                    return False
                    
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ end-to-end —Ç–µ—Å—Ç–∞: {e}")
            return False


async def quick_formula_test():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ñ–æ—Ä–º—É–ª –±–µ–∑ –ë–î
    """
    print("üîç –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –§–û–†–ú–£–õ")
    print("=" * 35)
    
    try:
        from app.core.scoring.base import EWMAHelper, ScoringComponents
        
        # –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
        print("üßÆ –¢–µ—Å—Ç –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        
        # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
        result1 = EWMAHelper.safe_division(10, 2, default=0)
        if result1 != 5.0:
            print(f"‚ùå Safe division failed: 10/2 = {result1}, expected 5.0")
            return False
        
        # –î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
        result2 = EWMAHelper.safe_division(10, 0, default=-1)
        if result2 != -1:
            print(f"‚ùå Safe division by zero failed: got {result2}, expected -1")
            return False
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–æ–≥–∞—Ä–∏—Ñ–º
        result3 = EWMAHelper.safe_log(2.718281828, default=0)
        if abs(result3 - 1.0) > 0.001:
            print(f"‚ùå Safe log failed: log(e) = {result3}, expected ~1.0")
            return False
        
        # –õ–æ–≥–∞—Ä–∏—Ñ–º –æ—Ç –Ω—É–ª—è
        result4 = EWMAHelper.safe_log(0, default=-999)
        if result4 != -999:
            print(f"‚ùå Safe log of zero failed: got {result4}, expected -999")
            return False
        
        print("‚úÖ –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç EWMA
        print("\nüéØ –¢–µ—Å—Ç EWMA —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è...")
        
        # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ)
        smoothed1 = EWMAHelper.smooth(100, None, 0.3)
        if smoothed1 != 100:
            print(f"‚ùå EWMA first value failed: got {smoothed1}, expected 100")
            return False
        
        # –í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º)
        smoothed2 = EWMAHelper.smooth(150, 100, 0.3)
        expected = 0.3 * 150 + 0.7 * 100  # = 45 + 70 = 115
        if abs(smoothed2 - expected) > 0.001:
            print(f"‚ùå EWMA calculation failed: got {smoothed2}, expected {expected}")
            return False
        
        print("‚úÖ EWMA —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º—É–ª: {e}")
        return False


async def test_model_structure():
    """
    –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–æ–¥–µ–ª–∏
    """
    print("üîç –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –ú–û–î–ï–õ–ò")
    print("=" * 35)
    
    try:
        from app.core.scoring import AVAILABLE_MODELS
        from app.core.scoring.hybrid_momentum_v1 import HybridMomentumV1
        from app.core.scoring.base import ScoringConfig
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
        if "hybrid_momentum_v1" not in AVAILABLE_MODELS:
            print("‚ùå hybrid_momentum_v1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ AVAILABLE_MODELS")
            return False
        
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {len(AVAILABLE_MODELS)}")
        for model_name in AVAILABLE_MODELS.keys():
            print(f"   ‚Ä¢ {model_name}")
        
        # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
        config = ScoringConfig(
            model_name="hybrid_momentum_v1",
            weights={"W_tx": 0.25, "W_vol": 0.35, "W_hld": 0.20, "W_oi": 0.20},
            ewma_alpha=0.3,
            min_score_threshold=0.5
        )
        
        model = HybridMomentumV1(config)
        
        print("‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
        model_info = model.get_model_info()
        
        print(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω–∞:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {model_info['name']}")
        print(f"   –í–µ—Ä—Å–∏—è: {model_info['version']}")
        print(f"   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(model_info['components'])}")
        print(f"   –°—É–º–º–∞ –≤–µ—Å–æ–≤: {model_info['weights_sum']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="Test Scoring Engine")
    parser.add_argument(
        "--mode", 
        choices=["quick", "model", "manager", "config", "e2e", "all"], 
        default="quick",
        help="Test mode"
    )
    
    args = parser.parse_args()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SCORING ENGINE")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if args.mode == "quick":
        success = asyncio.run(quick_formula_test())
    elif args.mode == "model":
        tester = ScoringTester()
        success = asyncio.run(tester.test_hybrid_momentum_model())
    elif args.mode == "manager":
        tester = ScoringTester()
        success = asyncio.run(tester.test_scoring_manager())
    elif args.mode == "config":
        tester = ScoringTester()
        success = asyncio.run(tester.test_configuration_loading())
    elif args.mode == "e2e":
        tester = ScoringTester()
        success = asyncio.run(tester.test_end_to_end_calculation())
    elif args.mode == "all":
        tester = ScoringTester()
        
        tests = [
            ("–§–æ—Ä–º—É–ª—ã", quick_formula_test()),
            ("–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–¥–µ–ª–∏", test_model_structure()),
            ("Hybrid Momentum –º–æ–¥–µ–ª—å", tester.test_hybrid_momentum_model()),
            ("Scoring Manager", tester.test_scoring_manager()),
            ("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", tester.test_configuration_loading()),
            ("End-to-End —Ä–∞—Å—á–µ—Ç", tester.test_end_to_end_calculation())
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_coro in tests:
            print(f"\nüîÑ {test_name}...")
            try:
                if asyncio.run(test_coro):
                    passed += 1
                    print("‚úÖ –ü—Ä–æ–π–¥–µ–Ω")
                else:
                    failed += 1
                    print("‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω")
            except Exception as e:
                failed += 1
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print(f"\nüìä –ò–¢–û–ì–ò: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        success = failed == 0
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Scoring Engine –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        if args.mode == "quick":
            print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print("   python3 scripts/test_scoring.py --mode all")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Scoring Engine –Ω–µ —É–¥–∞–ª–æ—Å—å")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
