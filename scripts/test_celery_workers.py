#!/usr/bin/env python3
"""
Test Celery workers functionality and performance
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ Celery workers
"""

import asyncio
import sys
import os
import time
import requests
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))


class CeleryWorkersTester:
    """
    –¢–µ—Å—Ç–µ—Ä –¥–ª—è Celery workers
    """
    
    def __init__(self):
        self.base_url = "http://localhost"
        
    async def test_celery_monitoring(self) -> bool:
        """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Celery –±–µ–∑ –ë–î"""
        print("üîç –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê CELERY")
        print("=" * 40)
        
        try:
            from app.core.celery_monitoring.monitor import CeleryMonitor
            from app.core.celery_monitoring.health import CeleryHealthChecker
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä
            monitor = CeleryMonitor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = monitor.get_stats()
            
            print("‚úÖ Celery –º–æ–Ω–∏—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
            print(f"   Workers –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {stats.get('workers_checked', 0)}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö workers: {stats.get('active_workers', 0)}")
            print(f"   –û—à–∏–±–æ–∫: {stats.get('errors', 0)}")
            
            # –°–æ–∑–¥–∞–µ–º health checker
            health_checker = CeleryHealthChecker()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = health_checker.get_health_history()
            
            print("‚úÖ Health checker —Å–æ–∑–¥–∞–Ω")
            print(f"   –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫: {len(history)} –∑–∞–ø–∏—Å–µ–π")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False

    async def test_worker_status(self) -> bool:
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ workers —Å –ë–î"""
        print("\nüîç –¢–ï–°–¢ –°–¢–ê–¢–£–°–ê WORKERS")
        print("=" * 35)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not os.getenv("DATABASE_URL"):
            print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î")
            return True
        
        try:
            from app.database import SessionLocal
            from app.core.celery_monitoring.monitor import celery_monitor
            
            if not SessionLocal:
                print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
                return False
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ workers
            workers_status = await celery_monitor.get_workers_status()
            
            print("‚úÖ –°—Ç–∞—Ç—É—Å workers –ø–æ–ª—É—á–µ–Ω:")
            print(f"   –°—Ç–∞—Ç—É—Å: {workers_status.get('status')}")
            
            workers = workers_status.get("workers", [])
            summary = workers_status.get("summary", {})
            
            print(f"   –í—Å–µ–≥–æ workers: {summary.get('total_workers', 0)}")
            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö: {summary.get('active_workers', 0)}")
            print(f"   –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {summary.get('inactive_workers', 0)}")
            
            if workers:
                for worker in workers[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3
                    print(f"   Worker: {worker.get('name')} - {worker.get('status')}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ workers: {e}")
            return False

    async def test_performance_monitoring(self) -> bool:
        """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\nüîç –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not os.getenv("DATABASE_URL"):
            print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î")
            return True
        
        try:
            from app.core.celery_monitoring.monitor import celery_monitor
            
            # –¢–µ—Å—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance = await celery_monitor.get_performance_metrics()
            
            print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω—ã:")
            print(f"   –°—Ç–∞—Ç—É—Å: {performance.get('status')}")
            
            summary = performance.get("summary", {})
            print(f"   –í—Å–µ–≥–æ workers: {summary.get('total_workers', 0)}")
            print(f"   –û–±—â–∞—è –ø–∞–º—è—Ç—å: {summary.get('total_memory_mb', 0):.1f}MB")
            print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ 2GB –ª–∏–º–∏—Ç–∞: {summary.get('memory_limit_2gb_usage_percent', 0):.1f}%")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ memory usage –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
            usage_percent = summary.get("memory_limit_2gb_usage_percent", 0)
            if usage_percent > 90:
                print("‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏!")
            elif usage_percent > 75:
                print("‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏")
            else:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –≤ –Ω–æ—Ä–º–µ")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False

    def test_api_endpoints(self) -> bool:
        """–¢–µ—Å—Ç API endpoints —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã"""
        print("\nüîç –¢–ï–°–¢ API ENDPOINTS")
        print("=" * 30)
        
        try:
            endpoints = [
                ("/api/celery/status", "–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å Celery"),
                ("/api/celery/workers", "–°—Ç–∞—Ç—É—Å workers"),
                ("/api/celery/queues", "–°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–µ–π"),
                ("/api/celery/performance", "–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"),
                ("/api/celery/beat", "–°—Ç–∞—Ç—É—Å Beat scheduler"),
                ("/api/celery/config", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery")
            ]
            
            working_endpoints = 0
            
            for endpoint, description in endpoints:
                try:
                    response = requests.get(f"{self.base_url}{endpoint}", timeout=10)
                    
                    if response.status_code == 200:
                        print(f"‚úÖ {description}: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        working_endpoints += 1
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö endpoints
                        if endpoint == "/api/celery/status":
                            data = response.json()
                            overall_status = data.get("overall_status", "unknown")
                            print(f"   –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: {overall_status}")
                            
                        elif endpoint == "/api/celery/workers":
                            data = response.json()
                            summary = data.get("summary", {})
                            print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö workers: {summary.get('active_workers', 0)}")
                            
                    else:
                        print(f"‚ùå {description}: –æ—à–∏–±–∫–∞ {response.status_code}")
                        
                except requests.exceptions.RequestException as e:
                    print(f"‚ö†Ô∏è  {description}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω): {e}")
            
            print(f"\nüìä –†–∞–±–æ—Ç–∞—é—â–∏—Ö endpoints: {working_endpoints}/{len(endpoints)}")
            return working_endpoints > 0
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints: {e}")
            return False

    def test_health_task_execution(self) -> bool:
        """–¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è health check –∑–∞–¥–∞—á–∏"""
        print("\nüîç –¢–ï–°–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø HEALTH CHECK")
        print("=" * 45)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º health check —á–µ—Ä–µ–∑ API
            response = requests.post(f"{self.base_url}/api/celery/test-task", timeout=15)
            
            if response.status_code == 200:
                data = response.json()
                task_id = data.get("task_id")
                
                print("‚úÖ Health check –∑–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞")
                print(f"   Task ID: {task_id}")
                
                # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–¥–∞—á–∏
                time.sleep(3)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
                tasks_response = requests.get(f"{self.base_url}/api/celery/tasks", timeout=10)
                
                if tasks_response.status_code == 200:
                    tasks_data = tasks_response.json()
                    current_tasks = tasks_data.get("current_tasks", {})
                    
                    print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω–∞")
                    
                    summary = current_tasks.get("summary", {})
                    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {summary.get('total_active_tasks', 0)}")
                    print(f"   –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {summary.get('total_reserved_tasks', 0)}")
                    
                    task_types = current_tasks.get("task_types", {})
                    if task_types:
                        print(f"   –¢–∏–ø–æ–≤ –∑–∞–¥–∞—á: {len(task_types)}")
                        for task_type, counts in list(task_types.items())[:3]:
                            print(f"     {task_type}: {counts.get('active', 0)} active")
                
                return True
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å health check: {response.status_code}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ö†Ô∏è  Health check –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω): {e}")
            return True  # –ù–µ –æ—à–∏–±–∫–∞ –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è health check: {e}")
            return False


async def quick_celery_test():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Celery –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    """
    print("üîç –ë–´–°–¢–†–´–ô –¢–ï–°–¢ CELERY")
    print("=" * 35)
    
    try:
        # –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Celery
        from app.core.celery_app import celery_app
        
        print("‚úÖ Celery app –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"   Broker: {celery_app.conf.broker_url}")
        print(f"   Backend: {celery_app.conf.result_backend}")
        print(f"   Concurrency: {celery_app.conf.worker_concurrency}")
        print(f"   Prefetch: {celery_app.conf.worker_prefetch_multiplier}")
        
        # –¢–µ—Å—Ç beat schedule
        beat_schedule = celery_app.conf.beat_schedule or {}
        print(f"   Scheduled tasks: {len(beat_schedule)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á
        for task_name in list(beat_schedule.keys())[:5]:
            schedule = beat_schedule[task_name].get("schedule", "unknown")
            if isinstance(schedule, (int, float)):
                if schedule >= 3600:
                    schedule_str = f"{schedule/3600:.1f}h"
                elif schedule >= 60:
                    schedule_str = f"{schedule/60:.1f}m"
                else:
                    schedule_str = f"{schedule}s"
            else:
                schedule_str = str(schedule)
            
            print(f"     {task_name}: {schedule_str}")
        
        # –¢–µ—Å—Ç –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        include = celery_app.conf.include or []
        print(f"   –í–∫–ª—é—á–µ–Ω–æ –º–æ–¥—É–ª–µ–π: {len(include)}")
        
        expected_modules = [
            "app.workers.websocket_tasks",
            "app.workers.birdeye_tasks", 
            "app.workers.scoring_tasks",
            "app.workers.lifecycle_tasks",
            "app.workers.toml_tasks",
            "app.workers.celery_health_tasks"
        ]
        
        missing_modules = []
        for module in expected_modules:
            if module not in include:
                missing_modules.append(module)
        
        if missing_modules:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏: {missing_modules}")
            return False
        
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã –≤ Celery")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ Celery: {e}")
        return False
def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="Test Celery Workers System")
    parser.add_argument(
        "--mode",
        choices=["quick", "monitoring", "workers", "performance", "api", "health", "all"],
        default="quick",
        help="Test mode"
    )
    
    args = parser.parse_args()
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï CELERY WORKERS")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if args.mode == "quick":
        success = asyncio.run(quick_celery_test())
    elif args.mode == "monitoring":
        tester = CeleryWorkersTester()
        success = asyncio.run(tester.test_celery_monitoring())
    elif args.mode == "workers":
        tester = CeleryWorkersTester()
        success = asyncio.run(tester.test_worker_status())
    elif args.mode == "performance":
        tester = CeleryWorkersTester()
        success = asyncio.run(tester.test_performance_monitoring())
    elif args.mode == "api":
        tester = CeleryWorkersTester()
        success = tester.test_api_endpoints()
    elif args.mode == "health":
        tester = CeleryWorkersTester()
        success = tester.test_health_task_execution()
    elif args.mode == "all":
        tester = CeleryWorkersTester()
        
        tests = [
            ("–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Celery", quick_celery_test()),
            ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Celery", tester.test_celery_monitoring()),
            ("–°—Ç–∞—Ç—É—Å workers", tester.test_worker_status()),
            ("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", tester.test_performance_monitoring()),
            ("API endpoints", asyncio.create_task(asyncio.coroutine(tester.test_api_endpoints)())),
            ("Health check execution", asyncio.create_task(asyncio.coroutine(tester.test_health_task_execution)()))
        ]
        
        passed = 0
        failed = 0
        
        for test_name, test_task in tests:
            print(f"\nüîÑ {test_name}...")
            try:
                if test_name in ["API endpoints", "Health check execution"]:
                    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
                    if test_name == "API endpoints":
                        result = tester.test_api_endpoints()
                    else:  # Health check execution
                        result = tester.test_health_task_execution()
                else:
                    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
                    result = await test_task
                
                if result:
                    passed += 1
                    print("‚úÖ –ü—Ä–æ–π–¥–µ–Ω")
                else:
                    failed += 1
                    print("‚ùå –ù–µ –ø—Ä–æ–π–¥–µ–Ω")
            except Exception as e:
                failed += 1
                print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        print(f"\nüìä –ò–¢–û–ì–ò: {passed} –ø—Ä–æ–π–¥–µ–Ω–æ, {failed} –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        success = failed == 0
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery Workers –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
        if args.mode == "quick":
            print("\n–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print("   python3 scripts/test_celery_workers.py --mode all")
            print("\n–î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–∞–±–æ—Ç–∞—é—â–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º:")
            print("   uvicorn app.main:app --host 0.0.0.0 --port 8000")
            print("   python3 scripts/test_celery_workers.py --mode api")
            print("\n–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ workers:")
            print("   python3 scripts/celery_manager.py status")
            print("   python3 scripts/celery_manager.py production")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery Workers –Ω–µ —É–¥–∞–ª–æ—Å—å")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
