#!/usr/bin/env python3
"""
Test WebSocket integration with PumpPortal
–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import asyncio
import sys
import signal
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

from app.core.data_sources.pumpportal_websocket import (
    PumpPortalWebSocketClient,
    TokenMigrationEvent,
    NewTokenEvent
)


class WebSocketTester:
    """
    –¢–µ—Å—Ç–µ—Ä –¥–ª—è WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    
    def __init__(self):
        self.client: PumpPortalWebSocketClient = None
        self.running = False
        self.events_received = 0
        
    def handle_migration(self, event: TokenMigrationEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.events_received += 1
        print(f"üéØ MIGRATION #{self.events_received}:")
        print(f"   Token: {event.token_address}")
        print(f"   Pool: {event.liquidity_pool_address}")
        print(f"   DEX: {event.dex_name}")
        print(f"   Time: {event.timestamp}")
        print("-" * 50)
        
    def handle_new_token(self, event: NewTokenEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.events_received += 1
        print(f"üÜï NEW TOKEN #{self.events_received}:")
        print(f"   Token: {event.token_address}")
        print(f"   Name: {event.name}")
        print(f"   Symbol: {event.symbol}")
        print(f"   Time: {event.timestamp}")
        print("-" * 50)
        
    def handle_error(self, error: Exception):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print(f"‚ùå ERROR: {error}")
        
    async def run_test(self, test_duration: int = 60):
        """
        –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        
        Args:
            test_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        print(f"üß™ –¢–ï–°–¢ WEBSOCKET –ò–ù–¢–ï–ì–†–ê–¶–ò–ò")
        print("=" * 50)
        print(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: {test_duration} —Å–µ–∫—É–Ω–¥")
        print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
        self.client = PumpPortalWebSocketClient(
            on_migration=self.handle_migration,
            on_new_token=self.handle_new_token,
            on_error=self.handle_error
        )
        
        self.running = True
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            connected = await self.client.connect()
            if not connected:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket")
                return False
            
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
            migration_ok = await self.client.subscribe_migrations()
            new_token_ok = await self.client.subscribe_new_tokens()
            
            if not migration_ok:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏")
            else:
                print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–∞")
                
            if not new_token_ok:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã")
            else:
                print("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω–∞")
            
            if not migration_ok and not new_token_ok:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")
                return False
            
            print(f"\nüéß –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π... (–¥–æ {test_duration}s)")
            print("–û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç PumpPortal...")
            
            # –ñ–¥–µ–º —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
            try:
                await asyncio.wait_for(
                    self.client._listen_loop(),
                    timeout=test_duration
                )
            except asyncio.TimeoutError:
                print(f"\n‚è∞ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É ({test_duration}s)")
            
            return True
            
        except KeyboardInterrupt:
            print("\nüõë –¢–µ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            return False
            
        finally:
            self.running = False
            if self.client:
                await self.client.disconnect()
            
            print("\n" + "=" * 50)
            print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ê:")
            print(f"   –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {self.events_received}")
            print(f"   –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {'‚úÖ' if self.client and self.client.is_connected else '‚ùå'}")
            
            if self.events_received > 0:
                print("üéâ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            else:
                print("‚ö†Ô∏è  –°–æ–±—ã—Ç–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)")

async def simple_connection_test():
    """
    –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    """
    print("üîç –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
    print("=" * 40)
    
    client = PumpPortalWebSocketClient()
    
    try:
        connected = await client.connect()
        if connected:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PumpPortal —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏
            migration_ok = await client.subscribe_migrations()
            print(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {'‚úÖ' if migration_ok else '‚ùå'}")
            
            await client.disconnect()
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PumpPortal")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="Test PumpPortal WebSocket integration")
    parser.add_argument(
        "--mode", 
        choices=["simple", "listen"], 
        default="simple",
        help="Test mode: simple (connection test) or listen (wait for events)"
    )
    parser.add_argument(
        "--duration", 
        type=int, 
        default=60,
        help="Test duration in seconds for listen mode"
    )
    
    args = parser.parse_args()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
    def signal_handler(sig, frame):
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    if args.mode == "simple":
        success = asyncio.run(simple_connection_test())
    else:
        tester = WebSocketTester()
        success = asyncio.run(tester.run_test(args.duration))
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
