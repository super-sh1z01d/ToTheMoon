#!/usr/bin/env python3
"""
Celery worker startup script for ToTheMoon2
"""

import os
import sys
import subprocess
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def start_celery_worker():
    """
    –ó–∞–ø—É—Å–∫ Celery worker
    """
    print("üöÄ Starting Celery Worker...")
    
    os.chdir(backend_path)
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ worker
    cmd = [
        "celery", 
        "-A", "app.core.celery_app",
        "worker",
        "--loglevel=info",
        "--concurrency=2",  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è 2 GB RAM
        "--prefetch-multiplier=1"
    ]
    
    try:
        subprocess.run(cmd, check=True)
    except KeyboardInterrupt:
        print("\nüõë Celery worker stopped by user")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Celery worker failed: {e}")
        return False
    
    return True

def start_celery_beat():
    """
    –ó–∞–ø—É—Å–∫ Celery beat (–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫)
    """
    print("‚è∞ Starting Celery Beat...")
    
    os.chdir(backend_path)
    
    # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ beat
    cmd = [
        "celery",
        "-A", "app.core.celery_app", 
        "beat",
        "--loglevel=info"
    ]
    
    try:
        subprocess.run(cmd, check=True)
    except KeyboardInterrupt:
        print("\nüõë Celery beat stopped by user")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Celery beat failed: {e}")
        return False
    
    return True

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
    """
    if len(sys.argv) < 2:
        print("Usage: python start_celery.py [worker|beat|both]")
        print("  worker - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ worker")
        print("  beat   - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
        print("  both   - –∑–∞–ø—É—Å—Ç–∏—Ç—å worker –∏ beat –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ")
        sys.exit(1)
    
    mode = sys.argv[1].lower()
    
    if mode == "worker":
        start_celery_worker()
    elif mode == "beat":
        start_celery_beat()
    elif mode == "both":
        print("üöÄ Starting Celery Worker & Beat...")
        print("–î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã!")
        
        # –í development –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        # –í production –ª—É—á—à–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
        import multiprocessing
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º beat –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
        beat_process = multiprocessing.Process(target=start_celery_beat)
        beat_process.start()
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º worker –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            start_celery_worker()
        finally:
            print("Stopping beat process...")
            beat_process.terminate()
            beat_process.join()
    else:
        print(f"‚ùå Unknown mode: {mode}")
        sys.exit(1)

if __name__ == "__main__":
    main()
