#!/usr/bin/env python3
"""
Celery workers management utility
–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Celery workers
"""

import os
import sys
import time
import signal
import subprocess
import psutil
from pathlib import Path
from typing import List, Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))


class CeleryManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Celery workers
    """
    
    def __init__(self):
        self.backend_path = backend_path
        self.worker_processes: List[subprocess.Popen] = []
        self.beat_process: Optional[subprocess.Popen] = None
        
    def start_worker(self, worker_name: str = "worker1", concurrency: int = 2) -> bool:
        """
        –ó–∞–ø—É—Å–∫ Celery worker
        """
        try:
            print(f"üöÄ Starting Celery worker '{worker_name}' with concurrency {concurrency}...")
            
            cmd = [
                "celery",
                "-A", "app.core.celery_app",
                "worker",
                f"--hostname={worker_name}@%h",
                f"--concurrency={concurrency}",
                "--loglevel=info",
                "--prefetch-multiplier=1",
                "--without-gossip",  # –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏
                "--without-mingle",  # –≠–∫–æ–Ω–æ–º–∏—è –ø–∞–º—è—Ç–∏
                "--optimization=fair"  # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º worker
            process = subprocess.Popen(
                cmd,
                cwd=self.backend_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                env=os.environ.copy()
            )
            
            self.worker_processes.append(process)
            
            print(f"‚úÖ Worker '{worker_name}' started with PID {process.pid}")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to start worker '{worker_name}': {e}")
            return False
    
    def start_beat(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ Celery beat scheduler
        """
        try:
            print("‚è∞ Starting Celery beat scheduler...")
            
            cmd = [
                "celery",
                "-A", "app.core.celery_app",
                "beat",
                "--loglevel=info",
                "--pidfile=/tmp/celerybeat.pid",
                "--schedule=/tmp/celerybeat-schedule"
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º beat
            self.beat_process = subprocess.Popen(
                cmd,
                cwd=self.backend_path,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                env=os.environ.copy()
            )
            
            print(f"‚úÖ Beat scheduler started with PID {self.beat_process.pid}")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to start beat scheduler: {e}")
            return False
    
    def stop_workers(self, graceful: bool = True, timeout: int = 30) -> bool:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö workers
        """
        try:
            if not self.worker_processes:
                print("‚ÑπÔ∏è  No workers running")
                return True
            
            print(f"üõë Stopping {len(self.worker_processes)} workers (graceful={graceful})...")
            
            stopped_count = 0
            
            for i, process in enumerate(self.worker_processes):
                try:
                    if process.poll() is None:  # –ü—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∑–∞–ø—É—â–µ–Ω
                        if graceful:
                            # Graceful shutdown
                            process.send_signal(signal.SIGTERM)
                            
                            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                            try:
                                process.wait(timeout=timeout)
                                print(f"‚úÖ Worker {i+1} stopped gracefully")
                            except subprocess.TimeoutExpired:
                                print(f"‚ö†Ô∏è  Worker {i+1} didn't stop gracefully, forcing...")
                                process.kill()
                                print(f"üî¥ Worker {i+1} forcefully terminated")
                        else:
                            # Force shutdown
                            process.kill()
                            print(f"üî¥ Worker {i+1} forcefully terminated")
                        
                        stopped_count += 1
                    else:
                        print(f"‚ÑπÔ∏è  Worker {i+1} already stopped")
                        
                except Exception as e:
                    print(f"‚ùå Error stopping worker {i+1}: {e}")
            
            self.worker_processes.clear()
            
            print(f"‚úÖ Stopped {stopped_count} workers")
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to stop workers: {e}")
            return False
    
    def stop_beat(self, graceful: bool = True, timeout: int = 10) -> bool:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ beat scheduler
        """
        try:
            if not self.beat_process:
                print("‚ÑπÔ∏è  Beat scheduler not running")
                return True
            
            print("üõë Stopping beat scheduler...")
            
            if self.beat_process.poll() is None:  # –ü—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∑–∞–ø—É—â–µ–Ω
                if graceful:
                    self.beat_process.send_signal(signal.SIGTERM)
                    try:
                        self.beat_process.wait(timeout=timeout)
                        print("‚úÖ Beat scheduler stopped gracefully")
                    except subprocess.TimeoutExpired:
                        print("‚ö†Ô∏è  Beat scheduler didn't stop gracefully, forcing...")
                        self.beat_process.kill()
                        print("üî¥ Beat scheduler forcefully terminated")
                else:
                    self.beat_process.kill()
                    print("üî¥ Beat scheduler forcefully terminated")
            else:
                print("‚ÑπÔ∏è  Beat scheduler already stopped")
            
            self.beat_process = None
            return True
            
        except Exception as e:
            print(f"‚ùå Failed to stop beat scheduler: {e}")
            return False
    
    def restart_workers(self, concurrency: int = 2) -> bool:
        """
        –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö workers
        """
        print("üîÑ Restarting Celery workers...")
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if not self.stop_workers(graceful=True, timeout=30):
            print("‚ùå Failed to stop workers for restart")
            return False
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        time.sleep(2)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
        return self.start_worker("worker1", concurrency)
    
    def get_status(self) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        """
        status = {
            "workers": [],
            "beat_scheduler": None,
            "summary": {
                "total_workers": len(self.worker_processes),
                "running_workers": 0,
                "beat_running": False
            }
        }
        
        # –°—Ç–∞—Ç—É—Å workers
        for i, process in enumerate(self.worker_processes):
            is_running = process.poll() is None
            
            if is_running:
                status["summary"]["running_workers"] += 1
            
            worker_status = {
                "name": f"worker{i+1}",
                "pid": process.pid,
                "running": is_running,
                "return_code": process.returncode if not is_running else None
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            try:
                if is_running:
                    proc_info = psutil.Process(process.pid)
                    worker_status.update({
                        "cpu_percent": proc_info.cpu_percent(),
                        "memory_mb": round(proc_info.memory_info().rss / 1024 / 1024, 2),
                        "create_time": datetime.fromtimestamp(proc_info.create_time()).isoformat()
                    })
            except (psutil.NoSuchProcess, ImportError):
                pass
            
            status["workers"].append(worker_status)
        
        # –°—Ç–∞—Ç—É—Å beat scheduler
        if self.beat_process:
            is_running = self.beat_process.poll() is None
            status["summary"]["beat_running"] = is_running
            
            beat_status = {
                "pid": self.beat_process.pid,
                "running": is_running,
                "return_code": self.beat_process.returncode if not is_running else None
            }
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ beat –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                if is_running:
                    proc_info = psutil.Process(self.beat_process.pid)
                    beat_status.update({
                        "cpu_percent": proc_info.cpu_percent(),
                        "memory_mb": round(proc_info.memory_info().rss / 1024 / 1024, 2),
                        "create_time": datetime.fromtimestamp(proc_info.create_time()).isoformat()
                    })
            except (psutil.NoSuchProcess, ImportError):
                pass
            
            status["beat_scheduler"] = beat_status
        
        return status
    
    def cleanup(self):
        """
        –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        """
        print("üßπ Cleaning up Celery processes...")
        
        self.stop_workers(graceful=True, timeout=15)
        self.stop_beat(graceful=True, timeout=10)
        
        print("‚úÖ Cleanup completed")


def run_production_mode():
    """
    –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–¥ 2GB RAM)
    """
    print("üè≠ PRODUCTION MODE - OPTIMIZED FOR 2GB RAM")
    print("=" * 50)
    
    manager = CeleryManager()
    
    def signal_handler(sig, frame):
        print("\nüõë Received shutdown signal...")
        manager.cleanup()
        sys.exit(0)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º beat scheduler
        if not manager.start_beat():
            print("‚ùå Failed to start beat scheduler")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–∏–Ω worker —Å concurrency=1 –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        if not manager.start_worker("production-worker", concurrency=1):
            print("‚ùå Failed to start worker")
            manager.cleanup()
            return False
        
        print("\n‚úÖ Celery system started successfully!")
        print("üìä Monitoring available at:")
        print("   - /api/celery/status")
        print("   - /api/celery/workers") 
        print("   - /api/celery/performance")
        print("\n‚ö†Ô∏è  Press Ctrl+C to stop gracefully")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        while True:
            time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–ø—É—â–µ–Ω—ã
            status = manager.get_status()
            
            running_workers = status["summary"]["running_workers"]
            beat_running = status["summary"]["beat_running"]
            
            if running_workers == 0:
                print("‚ùå All workers stopped, restarting...")
                manager.restart_workers(concurrency=1)
            
            if not beat_running:
                print("‚ùå Beat scheduler stopped, restarting...")
                manager.start_beat()
                
            print(f"üìä Status: {running_workers} workers, beat: {'‚úÖ' if beat_running else '‚ùå'}")
            
    except KeyboardInterrupt:
        print("\nüõë Shutdown requested by user")
        manager.cleanup()
        return True
    except Exception as e:
        print(f"‚ùå Production mode failed: {e}")
        manager.cleanup()
        return False


def run_development_mode():
    """
    –ó–∞–ø—É—Å–∫ –≤ development —Ä–µ–∂–∏–º–µ (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    """
    print("üîß DEVELOPMENT MODE")
    print("=" * 30)
    
    manager = CeleryManager()
    
    def signal_handler(sig, frame):
        print("\nüõë Development mode shutdown...")
        manager.cleanup()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º beat
        manager.start_beat()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º worker —Å –±–æ–ª—å—à–∏–º concurrency –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        manager.start_worker("dev-worker", concurrency=2)
        
        print("\n‚úÖ Development Celery started!")
        print("üîß –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
        
        # –ü—Ä–æ—Å—Ç–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        while True:
            time.sleep(10)
            status = manager.get_status()
            print(f"üìä Workers: {status['summary']['running_workers']}, Beat: {'‚úÖ' if status['summary']['beat_running'] else '‚ùå'}")
            
    except KeyboardInterrupt:
        print("\nüõë Development mode stopped")
        manager.cleanup()
        return True
    except Exception as e:
        print(f"‚ùå Development mode failed: {e}")
        manager.cleanup()
        return False


def check_celery_status():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Celery –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    """
    print("üîç CHECKING CELERY STATUS")
    print("=" * 35)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã —á–µ—Ä–µ–∑ psutil
        celery_processes = []
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'cpu_percent', 'memory_info']):
            try:
                if 'celery' in ' '.join(proc.info['cmdline'] or []):
                    celery_processes.append({
                        'pid': proc.info['pid'],
                        'name': proc.info['name'],
                        'type': 'worker' if 'worker' in ' '.join(proc.info['cmdline']) else 'beat',
                        'cpu_percent': proc.info['cpu_percent'],
                        'memory_mb': round(proc.info['memory_info'].rss / 1024 / 1024, 2),
                        'cmdline': ' '.join(proc.info['cmdline'][:3])  # –ü–µ—Ä–≤—ã–µ 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if celery_processes:
            print(f"‚úÖ Found {len(celery_processes)} Celery processes:")
            
            total_memory = 0
            for proc in celery_processes:
                print(f"   {proc['type'].upper()}: PID {proc['pid']}, "
                     f"CPU: {proc['cpu_percent']:.1f}%, "
                     f"RAM: {proc['memory_mb']:.1f}MB")
                total_memory += proc['memory_mb']
            
            print(f"\nüìä Total memory usage: {total_memory:.1f}MB")
            print(f"üìä Memory usage of 2GB limit: {total_memory/2048*100:.1f}%")
            
            # –°—Ç–∞—Ç—É—Å –ø–æ —Ç–∏–ø–∞–º
            workers = [p for p in celery_processes if p['type'] == 'worker']
            beats = [p for p in celery_processes if p['type'] == 'beat']
            
            print(f"\nüìã Summary:")
            print(f"   Workers: {len(workers)}")
            print(f"   Beat schedulers: {len(beats)}")
            
        else:
            print("‚ùå No Celery processes found")
            print("üí° Start Celery with: python3 scripts/start_celery.py worker|beat")
        
        return len(celery_processes) > 0
        
    except ImportError:
        print("‚ö†Ô∏è  psutil not available, using basic check...")
        return True
    except Exception as e:
        print(f"‚ùå Failed to check status: {e}")
        return False


def kill_all_celery():
    """
    –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö Celery –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    """
    print("üí• FORCE KILLING ALL CELERY PROCESSES")
    print("=" * 45)
    
    try:
        killed_count = 0
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if 'celery' in ' '.join(proc.info['cmdline'] or []):
                    print(f"üî¥ Killing PID {proc.info['pid']}: {proc.info['name']}")
                    proc.kill()
                    killed_count += 1
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if killed_count > 0:
            print(f"‚úÖ Killed {killed_count} Celery processes")
        else:
            print("‚ÑπÔ∏è  No Celery processes found to kill")
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  psutil not available for process killing")
        return False
    except Exception as e:
        print(f"‚ùå Failed to kill processes: {e}")
        return False


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Celery
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="Celery Workers Management")
    parser.add_argument(
        "command",
        choices=["start", "stop", "restart", "status", "production", "development", "kill"],
        help="Command to execute"
    )
    parser.add_argument(
        "--concurrency",
        type=int,
        default=2,
        help="Worker concurrency (default: 2)"
    )
    parser.add_argument(
        "--workers",
        type=int,
        default=1,
        help="Number of workers to start (default: 1)"
    )
    
    args = parser.parse_args()
    
    print("üîß CELERY WORKERS MANAGER")
    print("=" * 40)
    
    if args.command == "status":
        success = check_celery_status()
    elif args.command == "kill":
        success = kill_all_celery()
    elif args.command == "production":
        success = run_production_mode()
    elif args.command == "development":
        success = run_development_mode()
    else:
        manager = CeleryManager()
        
        if args.command == "start":
            success = True
            # –ó–∞–ø—É—Å–∫–∞–µ–º beat
            if not manager.start_beat():
                success = False
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º workers
            for i in range(args.workers):
                if not manager.start_worker(f"worker{i+1}", args.concurrency):
                    success = False
            
            if success:
                print(f"\n‚úÖ Started {args.workers} workers with concurrency {args.concurrency}")
                print("‚ÑπÔ∏è  Use 'status' command to monitor")
        
        elif args.command == "stop":
            success = manager.stop_workers() and manager.stop_beat()
        
        elif args.command == "restart":
            success = manager.restart_workers(args.concurrency)
            if success and not manager.beat_process:
                manager.start_beat()
    
    if success:
        print("\nüéâ Operation completed successfully!")
    else:
        print("\n‚ùå Operation failed!")
    
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
