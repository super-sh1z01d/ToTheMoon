#!/usr/bin/env python3
"""
Test Birdeye API integration
–ü—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Birdeye API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

from app.core.data_sources.birdeye_client import BirdeyeClient, birdeye_manager


class BirdeyeTester:
    """
    –¢–µ—Å—Ç–µ—Ä –¥–ª—è Birdeye API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    
    def __init__(self):
        self.client: BirdeyeClient = None
        
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        print("üîç –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö BIRDEYE API")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API key
        api_key = os.getenv("BIRDEYE_API_KEY", "b2b52f3bd99c48e9b24c26ae0987cbe9")
        if not api_key:
            print("‚ùå BIRDEYE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        
        print(f"API Key: {api_key[:10]}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            self.client = BirdeyeClient(api_key=api_key)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å SOL —Ç–æ–∫–µ–Ω–æ–º
            test_token = "So11111111111111111111111111111111111111112"
            print(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {test_token[:8]}... (SOL)")
            
            # –¢–µ—Å—Ç overview
            print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ token overview...")
            overview = await self.client.get_token_overview(test_token)
            
            if overview:
                print("‚úÖ Token overview –ø–æ–ª—É—á–µ–Ω:")
                print(f"   Name: {overview.name}")
                print(f"   Symbol: {overview.symbol}")
                print(f"   Price: ${overview.price}")
                print(f"   Liquidity: ${overview.liquidity}")
                print(f"   Holders: {overview.holders}")
            else:
                print("‚ùå Token overview –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                return False
            
            # –¢–µ—Å—Ç trades
            print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ token trades...")
            trades = await self.client.get_token_trades(test_token, limit=100)
            
            if trades:
                print("‚úÖ Token trades –ø–æ–ª—É—á–µ–Ω—ã:")
                print(f"   Trades 5m: {trades.trades_5m}")
                print(f"   Trades 1h: {trades.trades_1h}")
                print(f"   Volume 5m: ${trades.volume_5m}")
                print(f"   Volume 1h: ${trades.volume_1h}")
                print(f"   Buys 5m: ${trades.buys_volume_5m}")
                print(f"   Sells 5m: ${trades.sells_volume_5m}")
            else:
                print("‚ö†Ô∏è  Token trades –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)")
            
            # –¢–µ—Å—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫...")
            metrics = await self.client.fetch_token_metrics(test_token)
            
            if metrics:
                print("‚úÖ –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:")
                print(f"   TX 5m: {metrics['tx_count_5m']}")
                print(f"   TX 1h: {metrics['tx_count_1h']}")
                print(f"   Volume 5m: ${metrics['volume_5m_usd']}")
                print(f"   Holders: {metrics['holders_count']}")
                print(f"   Liquidity: ${metrics['liquidity_usd']}")
            else:
                print("‚ùå –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
                return False
            
            print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return False
            
        finally:
            if self.client:
                await self.client.close()

    async def test_manager(self) -> bool:
        """–¢–µ—Å—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        print("\nüîç –¢–ï–°–¢ BIRDEYE –ú–ï–ù–ï–î–ñ–ï–†–ê")
        print("=" * 40)
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
            await birdeye_manager.initialize()
            
            if not birdeye_manager.client:
                print("‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return False
            
            print("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            test_token = "So11111111111111111111111111111111111111112"
            
            print(f"–ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {test_token[:8]}...")
            
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ API)
            metrics1 = await birdeye_manager.fetch_token_metrics(test_token)
            
            if metrics1:
                print("‚úÖ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (–∏–∑ API)")
            else:
                print("‚ùå –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è")
                return False
            
            # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –ø–æ–ø–∞—Å—Ç—å –≤ –∫–µ—à)
            metrics2 = await birdeye_manager.fetch_token_metrics(test_token)
            
            if metrics2:
                print("‚úÖ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω (–∏–∑ –∫–µ—à–∞)")
            else:
                print("‚ùå –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ —É–¥–∞–ª—Å—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = birdeye_manager.get_stats()
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API:")
            print(f"   –ó–∞–ø—Ä–æ—Å—ã: {stats.get('requests_made', 0)}")
            print(f"   Cache hits: {stats.get('cache_hits', 0)}")
            print(f"   Cache misses: {stats.get('cache_misses', 0)}")
            print(f"   Cache hit rate: {stats.get('cache_hit_rate', 0):.2%}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            return False
            
        finally:
            await birdeye_manager.close()

    async def test_database_integration(self) -> bool:
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î"""
        print("\nüîç –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–î")
        print("=" * 35)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DATABASE_URL
        if not os.getenv("DATABASE_URL"):
            print("‚ö†Ô∏è  DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –ë–î")
            return True
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
            await birdeye_manager.initialize()
            
            # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            test_token = "So11111111111111111111111111111111111111112"
            
            print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {test_token[:8]}...")
            
            success = await birdeye_manager.save_token_metrics(test_token)
            
            if success:
                print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
            from app.database import SessionLocal
            from app.crud import token_crud, token_metrics_crud
            
            if SessionLocal:
                db = SessionLocal()
                try:
                    # –ò—â–µ–º —Ç–æ–∫–µ–Ω
                    token = token_crud.get_by_address(db, token_address=test_token)
                    if token:
                        print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –≤ –ë–î: {token.token_address[:8]}...")
                        
                        # –ò—â–µ–º –º–µ—Ç—Ä–∏–∫–∏
                        metrics = token_metrics_crud.get_latest(db, token_id=token.id)
                        if metrics:
                            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–π–¥–µ–Ω—ã: TX 5m={metrics.tx_count_5m}")
                        else:
                            print("‚ö†Ô∏è  –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                    else:
                        print(f"‚ö†Ô∏è  –¢–æ–∫–µ–Ω {test_token} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ç–æ–∫–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ WebSocket –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
                        
                finally:
                    db.close()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ë–î: {e}")
            return False
            
        finally:
            await birdeye_manager.close()


async def quick_api_test():
    """
    –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç API –±–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    """
    print("üîç –ë–´–°–¢–†–´–ô –¢–ï–°–¢ BIRDEYE API")
    print("=" * 40)
    
    api_key = os.getenv("BIRDEYE_API_KEY", "b2b52f3bd99c48e9b24c26ae0987cbe9")
    
    if not api_key:
        print("‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    client = BirdeyeClient(api_key=api_key)
    
    try:
        # –¢–µ—Å—Ç —Å SOL
        test_token = "So11111111111111111111111111111111111111112"
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è SOL: {test_token[:8]}...")
        
        overview = await client.get_token_overview(test_token)
        
        if overview:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! SOL price: ${overview.price}")
            print(f"   Market cap: ${overview.market_cap}")
            print(f"   Liquidity: ${overview.liquidity}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
        
    finally:
        await client.close()


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    import argparse
    
    parser = argparse.ArgumentParser(description="Test Birdeye API integration")
    parser.add_argument(
        "--mode", 
        choices=["quick", "full", "manager", "db"], 
        default="quick",
        help="Test mode"
    )
    
    args = parser.parse_args()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º API –∫–ª—é—á –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω
    if not os.getenv("BIRDEYE_API_KEY"):
        os.environ["BIRDEYE_API_KEY"] = "b2b52f3bd99c48e9b24c26ae0987cbe9"
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    if args.mode == "quick":
        success = asyncio.run(quick_api_test())
    elif args.mode == "full":
        tester = BirdeyeTester()
        success = asyncio.run(tester.test_connection())
    elif args.mode == "manager":
        tester = BirdeyeTester()
        success = asyncio.run(tester.test_manager())
    elif args.mode == "db":
        tester = BirdeyeTester()
        success = asyncio.run(tester.test_database_integration())
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Birdeye API –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Birdeye API –Ω–µ —É–¥–∞–ª–æ—Å—å")
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
